# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

#+TITLE: LuneScript の C 言語トランスコンパイル時のスタック実装を考える

LuneScript の数値以外のオブジェクトは、スタックで管理する。

* スタック管理概要

- スレッド毎に、ローカル変数を管理する stack と、戻り値を管理する ret を持つ。
- stack は var_t [] (FIFO)
- ret は stem_t []
- stack/ret の position は、それぞれの index を使用する
  
- ブロック開始時に、
  - stack に none を push
  - ret に none を push
- ブロック終了時に
  - stack を none の位置まで pop
  - ret を none の位置まで pop

#+BEGIN_SRC c
{
    stack.pushNone(); // push none
    ret.pushNone(); // push none


    
    ret.popToNone();
    stack.popToNone();
}    
#+END_SRC

- ExpStmtNode の関数呼び出し時に、ret をクリアする。
  要は、 関数の引数で実行される関数コール等ではクリアしない。

- ローカル変数は、 stack の末尾のアドレス var_t * 型
- ローカル変数宣言時、 stack を拡張し、そのアドレスを変数に代入する
- メンバ変数は var_t 型で、  変数アクセス時に & を付けて var_t * としてアクセスする。
- クロージャも var_t * 型。

- 生成した any_t 生成は ret に add する

- ... を引数に持つ関数は、 stack から値を取得する。
  - 現在は DDD を管理するオブジェクトを生成しているが、これを止める。
  
* GC 管理

- 世代別 GC で管理する
- GC は gcNew と gcFull で分割
  - gcNew は、新しいオブジェクトのみを対象とする
  - gcFull は、全てのオブジェクトを対象とする
- 変数に、新しく生成したオブジェクトを保持しているかどうかの情報を持たせる。
  - 新しく生成したオブジェクトを保持する変数を newvar とする
  - newvar 変数は、双方向リストで newvar 同士をリンクさせる
- オブジェクトは、 次の gc 状態を保持する。
  - MINOR :: minor かどうか
  - REFED :: 参照されているかどうか
- 新しいオブジェクトを保持する any_t * [] 型の newpool を用意し、
  新しいオブジェクト生成時に、newpool に追加する。
- オブジェクトを変数に代入する際、MINOR オブジェクトなら、変数を newvar に追加する。
  - 元々 newvar に追加されているなら何もしない
  - 元々 newvar で MAJOR オブジェクトを入れる場合は何もしない。
    - 不整合は gcNew の時に解消する
  
- GC の作業用に、 newpool と同じ型の workpool を用意する。
- gcNew は次の手順で行なう。
  - newpool のオブジェクトの REFED をクリア
  - newvar で参照している全オブジェクトについて以下を実行
    - オブジェクトが MAJOR だった場合、何もしない。
    - age をインクリメントし所定の値より大きくなった場合、次を実行
      - オブジェクトを MAJOR にセット
      - major リンクにオブジェクトを追加
      - newvar とリンクする var_t の pNewVar を NULL クリア
      - newvar を開放	
    - age が所定の値以下の場合、次を実行
      - オブジェクトを REFED にセット
      - workpool にコピー
  - newpool のオブジェクトで REFED がセットされていないオブジェクトを破棄
  - newpool を workpool で置き換え
- gcFull は次の手順で行なう。
  - gcNew を実行する
  - MAJOR の全オブジェクトの REFED をクリア
  - stack/ret から辿れるかどうか確認
    - クラスなどの場合、メンバも辿る。
    - ただし、 REFED が既に付いている場合は辿らない。
  - REFED がセットされていないオブジェクトを破棄
    - major のリンクから外す

  
#+BEGIN_SRC C
#define STATE_REFED 0x1
#define STATE_MINOR 0x2

#define IS_STATE_REFED( STATE ) ( STATE & STATE_REFED )
#define IS_STATE_MINOR( STATE ) ( STATE & STATE_MINOR )

struct var_t;

typedef struct any_t {
  /** このオブジェクトの状態 */
  uint8_t state;
  any_type_t type;
  void * pObj;

  /** major オブジェクト同士をリンクする。 minor の時は無効。 */
  struct any_t * pNext;
  struct any_t * pPrev;
} any_t;
typedef struct {
   stem_type_t type;
   union {
   } val;
} stem_t;
typedef struct {
  /** 確保したオブジェクトのポインタを保持する */
  any_t * pool[];
  int count;
} newpool_t;

newpool_t * s_pNewPool;
newpool_t * s_pWorkPool;

typedef struct varLink_t {
   /** gc で開放されなかった回数 */
   int age;
   /** newvar 同士をリンクする双方向リスト。 */
   struct varLink_t * pNext;
   struct varLink_t * pPrev;
   /** この newvar のオリジナル var */
   struct var_t * pVar;
} varLink_t;
typedef struct var_t {
   stem_t stem;

   /** この変数が newvar 変数の場合、セットされる。*/
   varLink_t * pLink;
} var_t;


#+END_SRC

  


* スタック概要サンプル

#+BEGIN_SRC lns
{
   /**
   各ステップでのスタックの状態を示す
   */

   // stack: /
   let val1 = "1";
   let val2 = "2";
   // stack: / 1 2 :
   {
   // stack: / 1 2 / :
      let val3 = "3";
      let val4 = "4";
      // stack: / 1 2 / 3 4 :
      fn func() {
         // stack: / 1 2 / 3 4 / :
         let val5 = "5";
	 // stack: / 1 2 / 3 4 / 5 :

	 return;
	 // stack: / 1 2 / 3 4 :
      }
      func();
      fn func2( data1:str, data2:str ) {
	 let val6 = "6c";
         // stack: / 1 2 / 3 4 / 6a 6b 6c :

	 return;
         // stack: / 1 2 / 3 4 : 
      }
      func2( "6a", "6b" ); // stack: / 1 2 / 3 4 / 6a 6b :
      fn func3( data1:str, data2:str ): str, str {
         // stack: / 1 2 / 3 4 / 8a 8b :
         return "7a", "7b" ; // stack: / 1 2 / 3 4 : 7a 7b
      }
      let val8 = func3( "8a", "8b" ); // stack: / 1 2 / 3 4 / 8a 8b :
      // stack: / 1 2 / 3 4 7a

      fn func4( data1:str ):str {
         fn func5( data2:str ):str {
	    // stack: / 1 2 / 3 4 7a / 11 10 :
	    return "9"; // stack: / 1 2 / 3 4 7a : 9
	 }
	 return func5( "10" ); // stack: / 1 2 / 3 4 7a / 11 10 :
	                       // stack: / 1 2 / 3 4 7a : 9
      }
      func4( "11" ); // stack: / 1 2 / 3 4 7a / 11 :
   }
}
#+END_SRC

