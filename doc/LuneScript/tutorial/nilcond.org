# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

#+TITLE: トランスコンパイラ LuneScript チュートリアル nil 条件演算子 編

今回は LuneScript の nil 条件演算子について説明します。

* Map アクセス

例えば次のような Map のデータがあった場合、

#+BEGIN_SRC lns
let json = {
   "lv1": {
      "lv2": {
         "lv3": {
            "lv4": { 
               "lv5": {
                  "val": 1
               }           
            }        
         }     
      }  
   }
};
#+END_SRC

lv5 の val にアクセスするには、次のように処理する必要があります。

#+BEGIN_SRC lns
if! let lv1 = json.lv1 {
   if! let lv2 = lv1.lv2 {
      if! let lv3 = lv2.lv3 {
         if! let lv4 = lv3.lv4 {
            if! let lv5 = lv4.lv5 {
               print( lv5.val );
            }        
         }     
      }  
   }  
}
#+END_SRC

あるいは次のように unwrap する必要があります。

#+BEGIN_SRC lns
print( (unwrap (unwrap (unwrap (unwrap (unwrap json.lv1).lv2).lv3).lv4).lv5).val );
#+END_SRC

どちらにしてもイマイチです。

このようなネストされた nil チェックを簡単に行なうために利用できるのが
nil 条件演算子です。

* nil 条件演算子

nil 条件演算子を使って上記の lv5 の val にアクセスすると、
次のようになります。

#+BEGIN_SRC lns
print( json.lv1$.lv2$.lv3$.lv4$.lv5$.val );
#+END_SRC

だいぶスッキリします。

nil 条件演算子は、
nilable の式の直後に指定することで、
nilable の式が nil かどうかで、その後の式を実行するかどうかを制御します。




