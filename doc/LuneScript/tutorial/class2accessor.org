# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

#+TITLE: トランスコンパイラ LuneScript チュートリアル accessor 編

今回はメンバの accessor について説明します。

* メンバ定義

メンバ定義は、ほぼ変数定義と同じですが、次の違いがあります。

- 初期値の設定が出来ない
- アクセス制御が追加
- accessor 指定が可能


次にメンバ定義の例を示します。

#+BEGIN_SRC lns
class Test {
   pri let val1:int;
   pri let val2:int {pub};
   pri let val3:int {pub,pub};
}
let mut test = new Test( 1, 2, 3 );
print( test.$val2, test.$val3 );  // 2 3
test.set_val3( 10 );
print( test.$val2, test.$val3 );  // 2 10
#+END_SRC

クラス Test は、 val1, val2 をメンバに持ちます。

val1 の定義は ~pri let val1:int;~ となっています。

これは、 これは通常の変数宣言に pri が付いただけなので問題ないと思います。

pri はアクセス制御で、意味はメソッド定義と同じです。

次に val2 の定義は、 ~pri let val2:int {pub};~ となっています。

この ~{pub}~ は、 val2 の accessor を定義しています。
pub は、 getter のアクセス制御を指定します。
この指定によって、次のメソッドが内部的に作成されます。

#+BEGIN_SRC lns
pub fn Test.get_val2(): int {
   return self.val2;
}
#+END_SRC

getter にアクセスする場合、 $ を使って次のようにアクセスします。

#+BEGIN_SRC lns
let mut test = new Test( 1, 2, 3 );
print( test.$val2, test.$val3 );  // 2 3
#+END_SRC

~test.$val2~ は、 ~test.get_val2()~ のシンタックスシュガーです。


* コンストラクタ定義

コンストラクタは __init で定義できます。

コンストラクタは、メソッド定義と次の点で異なります。

- コンストラクタ名は __init でなければならない。
- 戻り値の型を指定できない。
- コンストラクタの定義は、全メンバ定義の後にしなければならない。
  - nilable 型のメンバを明示的に初期化しない場合、 初期値 nil となります。
- コンストラクタは、全メンバを初期化しなければならない。
- コンストラクタ内で return できない。

次にコンストラクタの例を示します。

#+BEGIN_SRC lns
class Test {
   pri let val1:int;
   pri let val2:int;
   pub fn __init() {
      self.val1 = 0;
      self.val2 = 0;
   }
}
let test = new Test();
#+END_SRC

なお、コンストラクタでは immutable なメンバにも初期値を設定可能です。

** コンストラクタの引数

コンストラクタは引数を持てます。
この引数は、new 演算子によって与えられます。

#+BEGIN_SRC lns
class Test {
   pri let val1:int {pub};
   pri let val2:int {pub};
   pub fn __init( val1:int, val2:int ) {
      self.val1 = val1 + 10;
      self.val2 = val2 + 10;
   }
}
let test = new Test( 1, 2 );
print( test.$val1, test.$val2 ); // 11 12
#+END_SRC

** デフォルトコンストラクタ

コンストラクタを定義しない場合、
自動的に全メンバを設定するコンストラクタが生成されます。
このコンストラクタをデフォルトコンストラクタと言います。

デフォルトコンストラクタは、全メンバを設定するための引数を持ちます。
引数の順番は、クラスのメンバの宣言順です。

次のクラス宣言には、コンストラクタが宣言されていないため、
デフォルトコンストラクタが内部的に生成されます。

#+BEGIN_SRC lns
class Test {
   pri let val1:int {pub};
   pri let val2:int {pub};
}
#+END_SRC

そのデフォルトコンストラクタは、次のように定義されます。

#+BEGIN_SRC lns
   pub fn __init( val1:int, val2:int ) {
      self.val1 = val1;
      self.val2 = val2;
   }
#+END_SRC

デフォルトコンストラクタのアクセス制御は pub です。




