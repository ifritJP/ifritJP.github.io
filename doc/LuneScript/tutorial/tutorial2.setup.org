# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

#+TITLE: トランスコンパイラ LuneScript 入門 - 導入編

今回は、 LuneScript の導入方法についての紹介です。

* LuneScript の導入方法

LuneScript は Lua のトランスコンパイラです。
また、LuneScript 自体も Lua のスクリプトとして動作します。

よって、 LuneScript には Lua の実行環境が必要です。

** Lua の導入

Lua は次の URL からダウンロードできます。

http://www.lua.org/download.html

なお、 LuneScript が対応している Lua のバージョンは 5.2, 5.3 です。

Linux であれば、パッケージ管理で簡単に導入できます。

例えば ubuntu 等の apt 系のパッケージ管理では、次のコマンドで導入できます。

#+BEGIN_SRC sh
$ sudo apt install lua5.3
#+END_SRC

** LuneScript の導入

前述している通り、LuneScript は Lua のスクリプトとして動作します。

Lua のモジュール管理は非常に単純で、
Lua が管理するモジュールディレクトリにファイルを置くだけです。

LuneScript のモジュールは、github に公開しています。

https://github.com/ifritJP/LuneScript


手動でファイルコピーすることでもセットアップできますが、
以降では LuneScript の setup.lua を使ったセットアップ方法について説明します。


*** Lua が管理するモジュールディレクトリ

Lua が管理するモジュールディレクトリは次のコマンドで確認できます。

#+BEGIN_SRC sh
$ lua5.3 -e 'print( package.path )'
#+END_SRC

上記コマンドの結果は、次のようになります。 (環境によって異なります)

#+BEGIN_SRC sh
/usr/local/share/lua/5.3/?.lua;/usr/local/share/lua/5.3/?/init.lua;/usr/local/lib/lua/5.3/?.lua;/usr/local/lib/lua/5.3/?/init.lua;/usr/share/lua/5.3/?.lua;/usr/share/lua/5.3/?/init.lua;./?.lua;./?/init.lua
#+END_SRC

これを ; で区切ると次になります。

- /usr/local/share/lua/5.3/?.lua
- /usr/local/share/lua/5.3/?/init.lua
- /usr/local/lib/lua/5.3/?.lua
- /usr/local/lib/lua/5.3/?/init.lua
- /usr/share/lua/5.3/?.lua
- /usr/share/lua/5.3/?/init.lua
- ./?.lua
- ./?/init.lua

細かい説明は省きますが、
次のディレクトリが Lua が管理するモジュールディレクトリになります。

- /usr/local/share/lua/5.3
- /usr/local/lib/lua/5.3
- /usr/share/lua/5.3
- ./
  
*ディレクトリは環境によって異なります。*
  
  
環境変数によってもモジュールディレクトリを指定することは出来ますが、
ここでの説明は割愛します。
  
*** LuneScript の導入方法

LuneScript の setup.lua を実行します。

手順は次の通りです。

#+BEGIN_SRC sh
$ git clone https://github.com/ifritJP/LuneScript.git
$ cd LuneScript/src
$ lua5.3 setup.lua -d
$ sudo make install
#+END_SRC

これにより、 LuneScript がモジュールディレクトリにインストールされます。

LuneScript をインストールする Lua のモジュールディレクトリを指定したい場合、
~lua5.3 setup.lua -d~ の -d を外して実行してください。


* emacs の設定

LuneScript は、emacs で開発するための emacs lisp を提供しています。
  
emacs ユーザは次の設定をしてください。

#+BEGIN_SRC lisp
  (add-to-list 'load-path "my-lune-path")  ;;; clone した LuneScript のパスを指定
  (require 'lns-conf)
  (require 'lns-flymake)
  (require 'lns-auto-complete)
  (require 'lns-helm)
#+END_SRC

これにより、次が利用できます。

- .lns ファイルのインデント、色付け
- flymake による構文チェック
- auto-complete による補完

構文チェックは flymake と flycheck をサポートしています。
flycheck を利用したい場合 lns-flymake ではなく、 lns-flycheck を require してください。


** プロジェクトファイル

emacs で LuneScript を扱う場合、プロジェクトファイルを作成する必要があります。

プロジェクトファイルといっても、次の内容を持つ lune.js ファイルをプロジェクトの
トップディレクトリに置くだけです。

#+BEGIN_SRC js
{}
#+END_SRC

このファイルを置いたディレクトリが、モジュールの起点ディレクトリとなります。

例えば次のようなディレクトリ構成の場合、

#+BEGIN_SRC txt
foo/
foo/lune.js
foo/bar/
foo/bar/mod1.lns
#+END_SRC

bar.mod1 が、mod1.lns のモジュールパスとなります。

* まとめ

Lua のモジュール管理は非常に単純なため、簡単に導入ができます。  


次回は LuneScript による Hello World について紹介します。
