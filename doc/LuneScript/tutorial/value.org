# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

#+TITLE: トランスコンパイラ LuneScript 入門 - 値編

今回は、 LuneScript で扱える値について説明します。

* 値の型

LuneScript で扱える値の型と、トランスコンパイラ後の Lua の値との対応表を示します。

| LuneScript | Lua          | 用途                             | LuneScript での定義方法 |
|------------+--------------+----------------------------------+-------------------------|
| nil, null  | nil          | nil                              | nil                     |
| int        | 数値         | 整数                             | 0 1 2 3 ?A 0x10 -100    |
| real       | 数値         | 実数                             | 0.0 1.0 0.001           |
| str        | 文字列       | 文字列, バイナリデータ           | "abc" 'def'  ```hij```  |
| bool       | 真偽値       | 真偽値                           | true false              |
| List       | テーブル     | リスト                           | [1, 2, 3 ]              |
| Array      | テーブル     | 配列(固定長)                     | [@ 1, 2, 3 ]            |
| Map        | テーブル     | マップ                           | { "A":1, "BC": 100 }    |
| Set        | テーブル     | セット                           | (@ 1, 2, 3)             |
| class      | テーブル     | クラス                           | class Test {}           |
| interface  | テーブル     | インタフェース                   | interface Test {}       |
| form       | function     | 関数                             | fn func() {}            |
| enum       | 数値、文字列 | enum                             | enum Test { }           |
| stem       | 値           | nil 以外の全ての値を保持可能な型 |                         |

*2019/3* Set 追加。


上記の通り、 LuneScript では Lua の値を細分化してそれぞれを個別の型として扱います。

細分化の意図は、 Lua の次の仕様を改善することです。

- Lua の数値は全て実数であり、
  慣れていないと数値が実数であることによる不具合が生じる。
  例えば ~10/3~ の Lua の計算結果は、3 ではなく 3.3333 となる。
- Lua のテーブルは、全てのキーが自然数となる *シーケンス* と、
  キーが自然数とならない *非シーケンス* に分かれる。
  - この違いによって、テーブル内のデータを列挙する際の関数が 
    ipairs と pairs に分かれており、使い分けが必要になる。
     - pairs だけを使っていれば問題ないとも言えるが。。。
  - テーブルのサイズを取得する ~#~ 演算子は、シーケンスのサイズを返すものであり、
    非シーケンスのサイズを返さないため、紛らわしい。
    
    
** nil

nil は、 Lua の nil と同じです。

LuneScript では null も利用できます。

null は nil の alias です。

null のサポートにより、 LuneScript で JSON をそのまま扱うことができます。

** 整数、 実数

LuneScript は、整数と実数を分けて扱います。

これにより 10/3 は 3 となり、 10/3.0 は 3.3333... となります。

*** 数値リテラル

数値リテラルは C89 ライクなものを採用します。

- 整数は 10 進数と 16 進数表現をサポート
- 実数は 10 進数と e による指数表現。

*** 文字

LuneScript は、
~?~ を使用することで ~?~ に続く文字のコードを、
int 型のプリミティブな値として扱えます。

#+BEGIN_SRC lns
print( ?a ) // 97  (0x61)
#+END_SRC

なお、 ' や " の文字のコードを得る場合、
?\' のように \ でエスケープする必要があります。


*** 四則演算

数値の四則演算は Lua と同じものを採用します。

2項演算の結果は次の通り型が変わります。

- int と int の演算結果は int になる。
- real と real の演算結果は real になる。
- int と real の演算結果は real になる。
  
ただし、 int と int の演算結果が int の範囲外になった場合、
実行時の内部的な値としては real になりますが、LuneScript 上の型は int のままです。
演算結果を int に丸めるには、 ~@@int~ でキャストする必要があります。

*** ビット演算

ビット演算をサポートします。
Lua5.1 では使用できません。


ビット長は Lua5.2 では 32bit となります。
Lua5.3 のビット長は、環境に依存します。

- 論理積 (&)

#+BEGIN_SRC lns
1 & 3 == 1
#+END_SRC
  
- 論理和  (|)
  
#+BEGIN_SRC lns
1 | 2 == 3
#+END_SRC
  
- 排他的論理和 (~)
  
#+BEGIN_SRC lns
1 ~ 3 == 2
#+END_SRC
  
- 論理シフト(左) (|<<)
  
#+BEGIN_SRC lns
1 |<< 2 == 4
#+END_SRC
  
- 論理シフト(右) (|>>)

#+BEGIN_SRC lns
0x10 |>> 2 == 4
#+END_SRC

- ビット反転 (~)
  
#+BEGIN_SRC lns
~2 == 0xfffffffd  
#+END_SRC



** 文字列

" か ' で囲むと文字列になります。
"" 内では ' が使用でき、 '' 内では " が使用できます。

なお、 "", '' は改行を含めることはできません。
改行を含める場合は "\n" とします。

\n を使用せずに複数行の文字列を定義するには ``` を使用します。
`````` 内の \n は、改行ではなくそのまま \n として文字列になります。


文字列内の特定位置の文字を取得するには、 [N] を使用します。
ここで指定する N は、文字列先頭が 1 を示します。

#+BEGIN_SRC lns
let txt = "abc";
print( txt[ 2 ] );  // 98
#+END_SRC

N が文字列長を越えた場合の動作は、 *未定義* です。

** 真偽値(bool)

true, false をもちます。    



** リスト

リストは値を追加、削除可能な型です。

#+BEGIN_SRC lns
let mut list:List<int> = [];
list.insert( 1 ); // [ 1 ]
list.insert( 2 ); // [ 1, 2 ]
list.insert( 3 ); // [ 1, 2, 3 ]
list.remove(); // [ 1, 2 ]
print( list[1] ) // 1
#+END_SRC

リストの要素には [index] でアクセスします。
リストの先頭の index は 1 です。
リストの範囲外をアクセスした場合の動作は *未定義* です。


リストの長さを取得するのは ~#~ です。
例えば ~#list~ は、 リスト型の変数 list の長さを取得します。

値の追加は Lua と同じで insert(), 削除は remove() です。

** Map   
    
Map のリテラルは JSON フォーマットを拡張したフォーマットです。

次のように JSON フォーマットを扱えます。

#+BEGIN_SRC lns
let map = {
   "val1": 1,
   "val2": 2,
   "val3": 3
};
print( map.val1, map.val2, map.val3 ); // 1 2 3
#+END_SRC

次の点で JSON と違います。

- キーと値に nil 以外の全ての値を使用できる

#+BEGIN_SRC lns
let mut test:Map<int,int> = {};
let map = {
   1: "val1",
   2.0: "val2",
   test: "val3"
};
print( map[ 1 ], map[ 2.0 ], map[ test ] ); // val1 val2 val3
#+END_SRC

また、 null を nil の alias としているため、
JSON そのものを扱うことが出来ます。

#+BEGIN_SRC lns
let mut map:Map<str,int> = {};
map[ "abc" ] = 1;
map.xyz = 10;
#+END_SRC

Map の要素には [key] でアクセスします。
key の型が str の場合、 .key としてもアクセスできます。

例えば、次の [ "abc" ] と .abc は同じ要素にアクセスするため、
次の例の print は true を出力します。

#+BEGIN_SRC lns
print( map[ "abc" ] == map.abc ); // true
#+END_SRC

なお、マップに対して ~#~ 演算子は使用できません。

*** Map の注意

Map を扱う際、次を注意してください。

- マップのキーは、 int と real を区別することが出来ません。

具体的には、下記の例で ~map[1]~ と ~map[1.0]~ が、何を返すかは *未定義* です。

#+BEGIN_SRC lns
let map = {
   1: "val1",
   1.0: "val2",
};
print( map[ 1 ], map[ 1.0 ] );
#+END_SRC

これは Lua 仕様由来の制限です。

- キーに int, real, str 以外を使用した場合の、キーの同値判定

次の例において、 list1, list2 はどちらも int の 1 を要素に持つリストです。
この list1 をキーとして、 "aaa" を map に登録します。

そして、 list1, list2 をキーとして、 map から値を取得すると、
その結果は aaa と nil となります。

#+BEGIN_SRC lns
let mut map:Map<&List<int>,str> = {};
let list1 = [ 1 ];
let list2 = [ 1 ];
map[ list1 ] = "aaa";
print( map[ list1 ], map[ list2 ] );  // aaa nil
#+END_SRC

これは、 list1 と list2 が異なるキーとして判定されるためです。

int, real, str 以外を map のキーに使用した場合、
そのキーが等しいかどうかは、同じオブジェクトである必要があります。

** Set

値の集合を扱います。

詳しくは次の記事を参照してください。



** generics

List, Array, Map は generics 対応しています。

例えば、そえぞれ次のように宣言します。

#+BEGIN_SRC lns
let list:List<int> = [];  // int を要素に持つリスト
let array:Array<real> = [@];  // real を要素に持つ配列
let map:Map<str,int> = {}; // str をキー、int を値に持つマップ
#+END_SRC


** リスト、マップコンストラクタの型

#+BEGIN_SRC lns
let list = [ 1, 2, 3 ];
let map = { "A": 10, "B": 11, "C": 12 };
#+END_SRC

リスト、マップは、上記のようにリテラルを宣言できます。
この時生成される リスト、マップの型は、 構成する値によって決まります。

マップコンストラクタで利用されるキー、あるいは値が全て同じ型なら、
マップのキー、値の型は、そのキー、値の型になります。
いずれかが異なれば stem 型になります。

具体的には、次のようになります。

#+BEGIN_SRC lns
let list1 = [ 1, 2, 3 ];			// int[]
let list2 = [ 'a', 'b', 'c' ];			// str[]
let list3 = [ 'a', 1, 'c' ];			// stem[]
let map1 = { "A": 10, "B": 11, "C": 12 };	// Map<str,int>
let map2 = { "A": 10, "B": 11, "C": 12 };	// Map<str,int>
let map3 = { "a": 'z', "b": 'y', "c": 'x' };	// Map<str,str>
let map4 = { "a": 1, "b": 'Z' };		// Map<str,stem>
#+END_SRC


** enum

LuneScript は enum に対応しています。

詳細は明日の記事を参照してください。


** stem

stem は、nil 以外の全ての値を保持できる型です。

LuneScript は、静的型付け言語であり、
想定する型と異なる値を与えらた場合はコンパイルエラーします。

対して stem 型は、nil 以外の全ての型を扱える型なので、
nil 以外のどのような値を与えられてもコンパイルエラーしません。

stem! は nil を含む全ての値を扱える型です。
Lua の変数そのものと考えて問題ありません。

** form

form は関数オブジェクトを扱う型です。

関数については後述します。
