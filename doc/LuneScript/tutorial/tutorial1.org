# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

#+TITLE: トランスコンパイラ LuneScript チュートリアル

LuneScript のチュートリアルを作成するにあたって、
宣伝も兼ねてアドベントカレンダーにしようと思います。

初日の今回は、 LuneScript についての紹介です。


* LuneScript とは

まず LuneScript ってなんじゃらほいっ、というと Lua 向けのトランスコンパイラです。

じゃぁ Lua って何よ？って方も多いと思います。

特に Qiita の読者層は、JavaScript や Python, Ruby などを母国語としている
Web 系のエンジニアが多いと思うので、 Lua に触れる機会はあまり無いと思います。

また、 Lua 自体が話題になったのは 2010 年前後で、
最近は話題になることも少ないと思います。

ただこれは、Lua が廃れたということではなく、
Lua を必要とするようなユーザの中では既に常識となって、
敢えて話題にするようなことが無くなったことが大きな要因だと考えています。

んで、 結局 Lua が何かと言いうと、
C 言語のプログラムをホストとし、
その機能を拡張することを想定して設計されたスクリプト言語です。

どこにも Web 系に関連しそうなワードが無いですね。
強いて上げればスクリプト言語ってところでしょうか。

実際、 Qiita の記事で Lua のタグが付いているのは、
今日現在で 400 弱の記事しかありませんでした。
Qiita のタグ一覧ページでは、4ページ目になってようやく出てくる程度です。

ただでさえ存在感の薄い Lua の、
さらにトランスコンパイラなんて誰が使うんだよ、的な感じですが、
ここではそんなトランスコンパイラである LuneScript を扱っていきます。


* LuneScript の特徴

LuneScript は、Lua 向けトランスコンパイラであるため、
Lua には無い様々な機能をサポートしています。

その代表的なものとして次のものが挙げられます。

- 静的型付け
- 型推論
- NULL 安全 (null safety)。
- generics
- クラス定義
- マクロ

イマドキのプログラム言語機能として必要なものは、ほぼ取り入れられていると思います。

これらの機能により、Lua コードを直接書くよりも、
LuneScript を利用した方が規模の大きいコードを高い生産性で開発することが出来ます。


次回は LuneScript の導入方法について紹介します。
