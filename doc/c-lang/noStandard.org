# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}

#+TITLE: 意外と知らない C 言語のコンパイラ依存

プログラムの品質を示す要素の一つに、移植性があります。

移植性を上げるには、コンパイラ依存のコードを排除する必要があります。
そして、当然コンパイラ依存のコードを排除するには、
何がコンパイラ依存であるかを知らなければなりません。

ここでは、C 言語の規格では振舞が規定されていないコンパイラ依存の処理について紹介します。


このような記事は良く Web に転がっていますが、
多くの場合は重箱の隅をつついたようなもので、
「そんなの使わねぇよ」という様なことが多いです。

ここでは普段何気なく使っていたものが、実はコンパイラ依存だった、
というものを紹介します。

また、この記事では「何がコンパイラ依存なのか」ということと、
「コンパイラ依存にしないようにするにはどうすべきか」を書いていきます。


シリーズにしようと考えているので、新しい記事はここにリンクを追加するつもりです。

なお、コンパイラ依存であることが確認できる C 言語規格の章番号を入れるので、
興味のある方はそちらも合せて参照してください。

C言語の最新規格は C11 (ISO/IEC 9899:2011) です。
その一つ前の C99 (ISO/IEC 9899:1999) の JIS 版である JIS X 3010:2003 は、
次の URL で確認できます。

http://www.jisc.go.jp/app/jis/general/GnrJISNumberNameSearchList?toGnrJISStandardDetailList&jisStdId=1000027049&jisStdNo=X3010


なお、C 言語の移植性という意味では、
規格の差異(C89/C99/C11)もありますが、ここでは扱いません。


* #include の動作

#include には #include "" と #include <> があります。

あなたは、この 2 つの #include の違いを説明出来ますか？

多くの方は、次のように答えるのではないでしょうか？

- #include "" はカレントディレクトリをインクルードパスに含める。
- #include <> はカレントディレクトリをインクルードパスに含めない。

残念ながら違います。
その動きは規定されているものではなく、コンパイラ依存です。

C の規格では次のように規定(6.10.2)されています。

- #include ""
  - "" の間で指定した文字列で一意に決まるソースファイルの内容全体で置き換える。
  - ソースファイルの探索手順は処理系依存
  - ファイルが見つからなかった場合は、 #include <> で再処理する
- #include <>
  - <> の間で指定した文字列で一意に決まるヘッダの内容全体で置き換える。
  - どのようにして探索の場所を指定するか、またどのようにしてヘッダを識別するかは処理系依存。

どうでしょうか？
「探索手順は処理系依存」だと明記されています。

規格では「#include "" で見つからなかったら #include <> で再処理する」
としか規定していません。

* コンパイラ依存を避けるには

C 言語でコーディングする際は、
「コンパイラ依存にならないように気を付けろ」と良く言われます。

しかし、 #include の動作すらコンパイラ依存だとすると、
もはやコンパイラ依存のないコードなど書けません。
もしもコンパイラ依存を無くすなら、
#include を使わずに自前でファイルを展開してやる必要があります。


流石に #include を使わないというのはナンセンス過ぎるので、
次のルールで運用するのが現実的でしょう。

「#include "" が、カレントディレクトリを検索することを期待してはならない」
