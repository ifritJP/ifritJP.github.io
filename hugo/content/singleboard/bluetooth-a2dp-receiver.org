#+TITLE: Raspberry Pi で Bluetooth レシーバー (オーディオ:A2DP) を作成するための設定方法解説
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}

*2019/6 Bluetooth のファイル転送、PAN 設定について書きました。* 

- https://ifritjp.github.io/blog/site/2019/06/15/rasp0w.html


*2020/12 RaspberryPi4 の最新セットアップ方法に更新しました。* 


RaspberryPi で Bluetooth AUDIO (A2DP) レシーバーを作成するための設定方法が
Web に載っていますが、幾つかハマったポイントがあったので、
そのポイントを解説していきます。

設定内容は、apt でパッケージを入れてペアリングするだけですが、
ペアリングして音声が再生出来るようになるまでに、
いくつかハマるポイントがあります。

* OS イメージ

https://www.raspberrypi.org/software/operating-systems/

RaspberryPi の OS イメージは、
必ず *Raspberry Pi OS* を使用してください。
Raspberry Pi OS であれば、
Lite でも with desktop でも and recommended software でも OK です。

ちなみに今回使用したのは現時点で最新 2020-12-02 5.4 を使用しました。

*2020/3 現在、 Raspbian Buster と RaspberryPi3 Model B の組み合わせだと、A2DP 再生時の音声ノイズを改善できません。*
Raspbian Stretch でも、バージョンが異なるとノイズを改善できない可能性があります。
RaspberryPi3 Model B 以外でどうか、
あるいは、RaspberryPi3 Model B の他の個体でどうかは確認できていません。

なお、RaspberryPi3 の WiFi で脆弱性が確認されているようです。

https://pc.watch.impress.co.jp/docs/news/1237645.html

この記事では、末尾で WiFi を無効化しているので影響はありませんが、
もしも WiFi を有効化している場合は *各自の自己責任* のもと、
注意して運用してください。

*Raspberry pi 4 では、ノイズの問題はありません。*

*最新 OS イメージ +  Raspberry pi 3 でノイズが発生するかどうかは確認していません。*


* sshd 有効化

これは必須ではないですが ssh で作業した方が、なにかと便利なので設定しておきます。

OS イメージを書き込んだドライブ直下に、ファイル名 ssh で空ファイルを作成します。

Raspbian から作業する場合は、次のコマンドと等価です。

#+BEGIN_SRC txt
$ sudo touch /boot/ssh
#+END_SRC


Raspbian から作業するには、
RaspberryPi に キーボードとディスプレイを接続する必要があるので、
OS イメージ書き込み時にファイルを作成しておいた方が良いでしょう。


これで Raspbian を起動すれば、 ssh (id: pi, password: raspberry)が利用可能です。

*※デフォルトパスワードを変える、 pi アカウントを無効にするなど別途設定してください。*

* apt パッケージ更新

まずは apt パッケージを更新します。

#+BEGIN_SRC txt
$ sudo apt-get update
$ sudo apt-get upgrade
#+END_SRC

これはお決まりのパターンなんで、特に理由がない限りやっておきます。

* bluetooth 関連のパッケージ追加

#+BEGIN_SRC txt
$ sudo apt-get install bluez pulseaudio-module-bluetooth python-gobject python-gobject-2
#+END_SRC

このバージョンの OS イメージでは、
bluez はインストール済みですが念のため指定しておきます。

* Bluetooth の設定

次のコマンドを実行します。

#+BEGIN_SRC txt
pi@raspberrypi:~$ sudo bluetoothctl
[NEW] Controller XX:XX:XX:XX:XX:XX raspberrypi [default]
#+END_SRC

ここで show を入力し、 Bluetooth の情報を確認します。

#+BEGIN_SRC txt
show
Controller XX:XX:XX:XX:XX:XX
	Name: raspberrypi
	Alias: raspberrypi
	Class: 0x6c0000
	Powered: yes
	Discoverable: no
	Pairable: yes
	UUID: Headset AG                
	UUID: Generic Attribute Profile 
	UUID: A/V Remote Control        
	UUID: Generic Access Profile    
	UUID: PnP Information           
	UUID: A/V Remote Control Target 
	Discovering: no
#+END_SRC	

上記出力のようになると思います。

この出力には、以下がないです。

: UUID: Audio Sink

これがないと A2DP で接続出来ません。

以下では、Audio Sink を出すための設定について説明します。

まずは、 bluetoothctl を抜けてから以下を実行します。

: sudo apt-get install pulseaudio-module-bluetooth

これはデフォルトで入っているはずですが、念のため実行しておきます。

インストール後に再起動が必要です。

次に以下のコマンドを実行します。

#+BEGIN_SRC txt
$ sudo pulseaudio -D
$ sudo service bluetooth restart
#+END_SRC

ここで、再度 bluetoothctl の show を実行すると、次のようになっているはずです。

#+BEGIN_SRC txt
[bluetooth]# show
Controller XX:XX:XX:XX:XX:XX
        Name: raspberrypi4
        Alias: raspberrypi4
        Class: 0x000c0000
        Powered: yes
        Discoverable: no
        Pairable: yes
        UUID: Headset AG                
        UUID: Generic Attribute Profile 
        UUID: A/V Remote Control        
        UUID: Generic Access Profile    
        UUID: PnP Information           
        UUID: A/V Remote Control Target 
        UUID: Audio Source              
        UUID: Audio Sink                
        UUID: Headset                   
        Discovering: no
#+END_SRC

これで Audio Sink が認識されたので、 A2DP が利用できます。

次はペアリングです。

** ペアリング方法

Bluetooth を使用したことがあれば分かると思いますが、
ペアリングは次のステップで行ないます。

- Bluetooth service 側のデバイスをペアリング登録状態にする
- Bluetooth client 側のデバイスで検索し、ペアリングする
- ペアリングを認証する
  
以降では、ペアリングの登録と認証手順に分けて説明します。
  
*** ペアリング登録

ペアリングを行なうには、service 側をペアリング登録状態にします。
具体的には show コマンドで表示される次の状態を変更する必要があります。

#+BEGIN_SRC txt
	Powered: yes
	Discoverable: no
	Pairable: yes
#+END_SRC
	
それぞれの状態を設定するには、次のコマンドを使用します。

#+BEGIN_SRC txt
  power <on/off>             Set controller power
  pairable <on/off>          Set controller pairable mode
  discoverable <on/off>      Set controller discoverable mode
#+END_SRC  

現状 discoverable だけ no になっているので、
今回は discoverable on だけ実行します。

#+BEGIN_SRC txt
[bluetooth]# discoverable on
#+END_SRC

念のため再度 show を実行し、次のようになっていることを確認します。

#+BEGIN_SRC txt
	Powered: yes
	Discoverable: yes
	Pairable: yes
#+END_SRC
	
この状態で、 client 側で検索し、ペアリングします。

一定時間経過すると、 discoverable が自動で off になりますが、
念のため show コマンドで discoverable の状態を確認します。

discoverable が on の状態だと新規にペアリングを登録可能なので、
そのままだとセキュリティ上問題になります。
必ず discoverable が off になっていることを確認してください。

** ペアリングの認証

ペアリングすると、次のように出力されます。

#+BEGIN_SRC txt
[CHG] Device XX:XX:XX:XX:XX:XX Connected: yes
[CHG] Device XX:XX:XX:XX:XX:XX Connected: no
#+END_SRC

出力を見ると Connected が yes になった後に直ぐに no になっていることが分かります。

これは、ペアリングが認証されていないため、
接続を持続できずに切断していることを示します。

そこで、次のコマンドでペアリングを認証します。

: [bluetooth]# trust XX:XX:XX:XX:XX:XX

これでペアリングが認証され次のように表示されます。

#+BEGIN_SRC txt
[CHG] Device XX:XX:XX:XX:XX:XX Trusted: yes
Changing XX:XX:XX:XX:XX:XX trust succeeded
#+END_SRC

この状態で再度 client 側から接続すると、接続が維持されます。

以上でペアリング完了です。

この状態になれば、リブート後も自動でペアリングされます。

* audio source の確認

ペアリング完了した状態で、次のコマンドを実行してください。

$ pactl list sources short

これで次のような出力がされます。

: 0	lsa_output.platform-soc_audio.analog-stereo.monitor	module-alsa-card.c	s16le 2ch 44100Hz	SUSPENDED

これは、 Audio のソース一覧を出力するコマンドです。
A2DP で接続すると、このリストに次のような情報が出力されると、
 Web の解説ページには記載されていましたが、私の環境では表示されませんでした。

: 6	bluez_source.XX_XX_XX_XX_XX_XX.a2dp_source	module-bluez5-device.c	s16le 2ch 44100Hz	RUNNING

ここでは慌てず騒がず、
client 側の Audio 出力設定を Bluetooth に切り替えて音楽を再生してから、
再度上記コマンドを実行してください。

どうでしょうか？ 出力されましたか？ まだ、出力されない？
その人は、 client が A2DP ではなく Headset で再生されていると思われます。
client 側の設定で出力を A2DP に変更してください。

それでも駄目な場合、次のコマンドを実行してください。

: $ sudo service bluetooth restart

* /etc/rc.local の編集

デフォルトの起動状態では Audio Sink が有効にならないので、
Audio Sink を有効にするために /etc/rc.local に次の処理を追加します。

#+BEGIN_SRC txt
sleep 10 # 10 は環境によって変更する
pulseaudio -D
service bluetooth restart
#+END_SRC


* pulseaudio 出力先変更

pulseaudio の出力先は、次のコマンドで確認できます。

#+BEGIN_SRC txt
$ pactl list sinks short
0	alsa_output.usb-Burr-Brown_from_TI_USB_Audio_CODEC-00.analog-stereo	module-alsa-card.c	s16le 2ch 44100Hz	RUNNING
1	alsa_output.platform-soc_audio.analog-stereo	module-alsa-card.c	s16le 2ch 44100Hz	SUSPENDED
#+END_SRC

デフォルトの出力先を変更する場合は、
/etc/pulse/default.pa に出力先名を設定します。

: set-default-sink alsa_output.usb-Burr-Brown_from_TI_USB_Audio_CODEC-00.analog-stereo

これでリブートすれば出力先が切り替わります。


* WiFi を無効化

Bluetooth は WiFi と干渉します。
RaspberryPi3 の WiFi を有効にしていると、干渉ノイズが入ります。

干渉ノイズが気になる場合は、WiFi を無効化します。

WiFi 無効化は /boot/config.txt に次の設定を追加します。

: # WiFi off
: dtoverlay=pi3-disable-wifi


* /etc/pulse/daemon.conf の設定

*2018/5/29 追記*

/etc/pulse/daemon.conf に追記し、リブートさせます。

: resample-method = trivial

この設定をしないと、多くの場合にノイズが発生します。


* /etc/bluetooth/main.conf の設定

*2018/6/7 追記*

Client によっては、ペアリングできないことがあります。
その場合 /etc/bluetooth/main.conf に次を設定します。

: Class = 0x240404

Amazon Fire TV とペアリングする場合、この設定が必要でした。

* ボリューム  (AVRCP Absolute Volume)

client 側のボリュームを変更しても、音量が変わらない場合があります。

/私の環境では、ボリューム最小(ミュート)から 1 上げると最大の音量になる現象でした。/


これは、 AVRCP Absolute Volume (絶対音量) というものが影響しているらしく、
この設定をオフにする必要があります。

なお、 pulseaudio ではこの問題を認識しているようなので、
将来的にはこの問題はクリアになると思います。

https://gitlab.freedesktop.org/pulseaudio/pulseaudio/-/merge_requests/239


** windows

次のレジストリに 1 をセットしてください。

: HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Bluetooth\Audio\AVRCP\CT の
: 名前: DisableAbsoluteVolume
: 値: 1  (DWORD)

※再起動が必要

** android

開発者オプションで絶対音量機能を off にしてください。

* 参考

- https://www.raspberrypi.org/forums/viewtopic.php?t=68779
- https://qiita.com/yyano/items/802da53ad8a4a00d00e1  
