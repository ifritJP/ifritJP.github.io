#+TITLE: A. Why Lua's transcompiler LuneScript was developed
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <style type="text/css"> <!-- pre.src { color: #ffffff; background-color: #101010; } --> </style>

Lua is a lightweight, high-performance language. Lua's name recognition is low compared to the same scripting languages such as Ruby, Python, and JavaScript, but it can be said to be one of the most major and easy-to-embed languages that can be used to extend the system. In fact, there are many systems that incorporate Lua.

Also, in terms of execution performance, it is in the high-speed category as a scripting language. Without DSP-like processing, it is unlikely to become a system performance bottleneck.

I myself have experience in developing some software (both hobbies and business) using Lua, and it is one of the languages I often use.


* Why Lua's transcompiler LuneScript was developed

Lua is one of my favorite languages. However, for the following reasons, I stopped writing Lua code directly and started thinking about developing it using the transcompiler LuneScript.
- I want to write comfortably and safely
- Lua has problems specific to dynamically typed languages
  - Cannot static error check
  - Difficult to grasp the contents of other people's code
  - Large risk of maintenance, function addition, and refactoring
  - Complementation at the time of coding is not good
  - Field access control in the table is not possible
- Dissatisfied with Lua's functionality
  - nil unsafe
  - No macro
- There are few alternatives to Lua's characteristics of built-in ease and high execution performance.
- Already use Lua on many systems
Each will be described below.


** I want to write comfortably and safely

Yukihiro Matsumoto of Ruby wants Ruby to be fun.

I don't want LuneScript to be fun. No, I want to have more fun than I want.

Of course, it's better to have fun doing anything. I personally enjoy software development as a hobby (free of charge) in my private time.

Nowadays, even pure software stores that cannot be sold can get jobs that can receive guarantees using services like CrowdWorks. In such an era, the motivation to spend private time and develop free software is nothing but "fun".

However, software development itself is fun, but weird bug fixing and test code creation are not fun. The reason why such unpleasant work is necessary is that bugs are easy to get into software development, and the software will not work properly unless the bugs are removed.

Again, this task is not fun. It may be fun for some people, but at least for me it's a penance. Well, there is a sense of accomplishment that I've done it, but I don't want to bother to kill my private time, regardless of work.

I want to enjoy and secure software development without doing such unpleasant work as much as possible.

Perl author Larry Wall cites "laziness, impatience, and arrogance" as the three major virtues of a programmer. I think "fun and safe software development" is quite similar to this.

Lua does not provide a mechanism for easy and secure software development. If it's not provided, you can just make it yourself.

I spare no effort to make it easier.

This is the number one reason I develop LuneScript.


** Problems specific to dynamically typed languages

I'm not denying dynamically typed languages.

I myself often write processes in dynamically typed languages, and I don't want to use statically typed languages when writing simple processes that are less than 100 lines.

The problem with dynamically typed languages here is when using dynamically typed languages for scripts that may be developed by an unspecified number of people, rather than scripts created by individuals and maintained by themselves. , It is mentioned that it tends to be a problem.


*** Cannot static error check

Humans make mistakes.

If you're a software engineer coding full-time, you'll probably have countless experiences passing the wrong type of data as an argument with both hands and feet. A common mistake is when you pass a parsed result of a numeric string input to a function, the function asks for a numeric value, but passes the parsed string data as is, for example. When I think about it, I can think of many other things.

When developing with multiple members, the probability of making mistakes due to communication mistakes etc. further increases.

If it is a statically typed language, you will notice a mistake at compile time or at coding time with a type mismatch error.

But in a dynamically typed language, you can't tell until you actually run it. In some cases, it does not occur simply by moving it, but it occurs only at a specific path or at a specific timing.

Simple mistakes often cause serious problems later on, and often require a great deal of cost to reach the cause.

I think there is an idea that "tests can cover it", but writing tests is not free. As I wrote at the beginning, I don't enjoy writing tests. If the compiler guarantees me without writing tests, I'll take that one.

It is possible to do some static checking on code written in a dynamically typed language. However, it is much more expensive and less accurate than that of statically typed languages.

With a statically typed language, at least type-related mistakes can be reliably parsed statically.

Of course, it can't be parsed if you make it an arbitrary type like void * in c or Object in java, or if you use forced type conversion.

In the future, I believe that static analysis technology will evolve through technologies such as deep learning, making it easier to develop software. And I think it's a statically typed language that supports such development, not a dynamically typed language.

Well, maybe it's a different paradigm.


*** Difficult to grasp the contents of other people's code

Other people's code is harder to grasp than the code I wrote. This is natural.

That's not what I want to say here.

Nor is it a low level of indentation, non-compliance with coding conventions, or anything else.

No matter how well-known engineers write, if Sole is written in a dynamically typed language, it's harder to understand than code written in a statically typed language.

This is because the type information of data, which is an important factor of the program, is hardly written. If some engineers say that type information is not very important, it is better to re-unit the "algorithm and data structure".

The type can be predicted from the symbol name. Also, the symbol name should be given as such.

However, this is just an expectation, not a fact. When developing software, I don't want to rely on detective games.

Others may argue that the type information is included in the comments or documentation and should be checked. However, comments and documentation often deviate from the implementation, and if you can understand it at a glance and if you can't understand it without looking at the code + Î±, I can understand it at a glance. Better.

As I say many times, I want to have fun.


*** Large risk of maintenance, function addition, and refactoring

It's rare that you don't modify any code once you've created it.

There are many reasons why the OS you are running has changed, you need to add features, or you have found a potential bug, but there are many opportunities to modify existing code.

When modifying such existing code, dynamically typed languages are more risky than statically typed languages.

Again, some might say, "If you write the test well, there's no problem." However, although the answer is half correct, it is half lost.

"Modifying" is synonymous with "behavior changes". There is a difference in the degree of change, but there is no difference in the change. And if the behavior changes, it is not safe to have a test.

The reason is that the test is to confirm that the behavior is correct, and since the behavior changes, the test cannot be used as it is. Of course, not everything can be used, but it can be limited to changes in behavior.

Now, let's return to the topic of dynamically typed and statically typed languages.

Why is a dynamically typed language more risky when modifying existing code than a statically typed language? The reason is that it is difficult to completely correct the affected parts by modifying them.

If it is a statically typed language, it can be said that the correction is almost completed as long as it is compiled. On the other hand, in dynamically typed languages, it is often said that even if you try to run a test after correcting everything, it will not work properly due to an error due to omission of correction. After crushing the errors one by one, it is finally completed.

Considering which takes longer to deal with compile errors or test errors, it's overwhelmingly test errors. If it's a compile error, you can just correct the line of the compile error, but if it's a test error, it adds extra work to identify the cause of the error. Furthermore, if there is a leak in the existing test itself, it may not be possible to find the correction leak itself.

Also, it is still good if the worker who modifies the module is the module creator himself, but it is not uncommon for a completely different person to handle it. In that case, the risk is further increased by the synergistic effect of "it is difficult to grasp the contents of the code of another person" mentioned earlier.

I made many design changes during the development of LuneScript, but it's a chill to imagine if I was doing this in a dynamically typed language.


*** Complementation at the time of coding is not good

A decent complementary feature is essential to make coding easier.

Nowadays, even in dynamically typed languages, the coding completion function is working quite hard. But don't you have a disappointing experience with the candidates listed by that complement? Or isn't there something that should be listed in the first place not listed at all?

Complementing dynamically typed languages is quite difficult. This is because the completion function recognizes completion candidates based on the type information, but it is difficult for dynamically typed languages to recognize them statically.

In a statically typed language, type information can be determined statically, so type-related completion can be achieved accurately.

Of course, LuneScript also provides completion.

See the next article for details.

[[../completion]]


*** Field access control in the table is not possible

Access control is important.

This is because it is possible to specify which data / function can be accessed.

As a major premise at the time of design, it is common sense to disclose functions and data that can be used from the outside, and to keep functions and data that cannot be guaranteed to operate when used from the outside.

However, Lua does not allow this for table fields.

Perhaps dynamic control is possible with metatable, but at least static control is not possible.

As I say many times, it is only better to detect an error dynamically than it can detect an error statically, which is overwhelmingly inconvenient.

Even in languages with access restrictions, you may be able to access functions and data that were kept private by using the reflection function, but this is not a problem.

This is because access control clearly indicates the intention of the module designer, and when another person uses the module and accesses it without understanding the intention, the access deviates from the designer's intention. Because I think the purpose is to inform you.

Especially when writing test code, it may be required to be able to access private functions / data, so having a means to access private functions / data is not a problem in itself.

The problem is that there is no such control and everything is accessible.


** Dissatisfied with Lua's functionality

Lua is a compact and powerful language, but there are many features that plain Lua doesn't support.

One of the purposes of the transcompiler is to support functions that are not supported by plain Lua without modifying Lua.


*** nil unsafe

Lua's nil is a useful value, but it also causes dynamic errors. Many engineers are plagued by this nil-related error.

It is nil safe to solve that problem.

Many of the essential features of today's programming have already been realized since the days of Lisp. For example, GC, lambda calculus, closures, etc. have been around for decades.

In other words, it can be said that it has hardly evolved since that time.

"Almost not evolved" also means "somewhat evolved", and nil safety may be included in one of the evolutions. It's that important.

However, Lua doesn't support nil safety, which is a significant deduction for Imadoki's language.

By the way, Rust addresses the danger of nil (null) with the concept of lifetime and ownership. When I first saw this approach, I was very interested in "Is there such a way?"

In addition, Rust solves various problems such as memory management and data access contention as well as nil security by lifetime and ownership.

If you've never touched Rust, be sure to check out Lifetime and Ownership.

Quiet talk break.

LuneScript manages nilable, which can take nil, and non-nilable, which cannot take nil, as different types to prevent nil errors from occurring at unintended timings.

It also supports unwrapping of nilable to non-nilable type conversions and the nil conditional operator for easy access to multi-tiered nilable data, making nil error handling easier and safer. ..


*** No macro

Speaking of macros, Lisp has very powerful macros and can be said to be representative of languages that have macros. It is no exaggeration to say that macros underpin the appeal of Lisp.

However, I feel that many relatively new languages do not support macros.

Why does even C language have "what a macro"?

Well, even if the language itself doesn't have macros, it may be safe to say that macros are unnecessary if a separate engineer creates a script that automatically generates code from some data.

However, doing so would flood "some data" and "automatically generated scripts."

I think macros are necessary to prevent this from happening.

However, macros as sophisticated as Lisp are difficult to implement, and users need some learning.

With LuneScript, we have prepared macros that are easy to implement, have no burden on the user, and are easy for anyone to use and effective.

I also use macros in LuneScript's self-hosting, but I feel once again that macros are an integral part of programming languages.


** There are few alternatives to Lua's characteristics of built-in ease and high execution performance.

As mentioned earlier, Lua is one of the easiest languages to integrate into your system.

In particular, its compactness and the ability to compile with only standard C functions are very useful for embedding.

There are several other languages that are conscious of embedding, but I don't know any language that goes beyond Lua in terms of embedding.


** Already use Lua on many systems

There are many systems that incorporate Lua.

Once incorporated into a system, the Lua stays alive, as long as the system is alive.

Just because you don't like it doesn't mean you can change it.


* Finally

LuneScript is being developed to make up for Lua's shortcomings.

This isn't because Lua isn't a language that can't be used, but because it's a shame to leave Lua's shortcomings and flirt with other languages.

If you have a chance to consider embedded languages in the future, please consider that Lua has LuneScript.

Again, Lua is a lightweight, high-performance language. And keep in mind that Lua also has an option called LuneScript.
