#+TITLE: 12. Class Basics
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

LuneScript supports object-oriented programming with classes.


* Class specifications

LuneScript classes support the following:
- Access control
- accessor
- Inheritance
- abstract
- override
- advertise
- Mapping
- interface  
This time, I will explain the basic class definition.


* Minimum class definition

The minimum class definition is as follows.
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
}
#+END_SRC


It defines a class called Test.

+Note that the class definition must be done in the highest scope.+

*(2019/6/24) Added support for class definition in functions. However, classes that can be exposed to the outside must be declared in the highest scope.*


** External disclosure

To expose the class to an external module, add pub as follows:
#+BEGIN_SRC lns
// @lnsFront: ok
pub class Test {
}
#+END_SRC



* Instance generation

Instantiation of a class uses the new operator as follows:
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
}
let test = new Test();
#+END_SRC



* Method definition

The method definition is almost the same as the function definition.
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
   pub fn func() {
      print( __func__ );
   }
}
let test = new Test();
test.func();  // Test.func
#+END_SRC


Note that the method cannot be set to form type.

For example, the following ~sub( test.func )~ will fail.
#+BEGIN_SRC lns
// @lnsFront: error
class Test {
   pub fn func() {
      print( __func__ );
   }
}
fn sub( foo:form ) {
   foo();
}

let test = new Test();
sub( test.func );  // error
#+END_SRC


To avoid this error, create an anonymous function and pass it to =sub()= as follows:
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
   pub fn func() {
      print( __func__ );
   }
}
fn sub( foo:form ) {
   foo();
}

let test = new Test();
sub( fn() { test.func(); } );
#+END_SRC



** Access control

There are three types of access control:
|-|-|
| kinds | meaning | 
|-+-|
| pub | External disclosure | 
| local | Published in the same module | 
| pro | Publish to subclass | 
| pri | private | 

If not specified, the default is pri.


** self symbol

You can use the self symbol in the method.

The self symbol represents an instance of itself.

In the following example, the public method sub calls the private method =func()= using self.
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
   fn func() {
      print( __func__ );
   }
   pub fn sub() {
      self.func();
   }
}
let test = new Test();
test.sub();  // Test.func
#+END_SRC



** Separatism

The method can be defined separately from the class definition.

The method definition above can also be written as follows.
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
}
pub fn Test.func() {
   print( __func__ );
}
let test = new Test();
test.func();  // Test.func
#+END_SRC


However, the method of the class defined in another module cannot be defined in the module being imported.


** prototype declaration

Method definitions can also separate the actual definition by declaring only the type within the class definition.

The following example prototypes =func()= and separates the actual definition.

Prototyping =func()= allows you to call =func()= within = sub () =.
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
   fn func();
   pub fn sub() {
      self.func();
   }
}
pub fn Test.func() {
   print( __func__ );
}
let test = new Test();
test.sub();  // Test.func
#+END_SRC


Of course, the prototype declaration and the actual method type must match.


** Class method definition

Normal methods cannot be executed without an instance because they are associated with an instance, but class methods associated with a class can be executed without an instance.

To define a class method, simply add static to the method definition.
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
   pub static fn sfunc() {
      print( __func__ );
   }
}
Test.sfunc(); // Test.sfunc
#+END_SRC


*Class methods are only available in classes defined in the highest scope.*


* Member definition

Member definitions are similar to variable definitions, with the following differences:
- Initial value cannot be set at the time of declaration
- Access control added
- accessor can be specified

The following is an example of member definition.
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
   pri let val1:int;
   pri let val2:int;
   pri let val3:int;
   pub fn func() {
      print( self.val1, self.val2, self.val3 );
   }

}
let test = new Test( 1, 2, 3 );
test.func(); // 1 2 3 
#+END_SRC


Class Test has val1, val2, val3 as members.

The definition of val1 is ~pri let val1:int;~.

I don't think this is a problem because it's just a regular variable declaration with pri.

pri is access control and has the same meaning as the method definition.


* mutable

Members and methods also have mutable and immutable.

The differences between the methods mutable and immutable are as follows:
- A mutable method is a method whose members can be changed.
- Immutable methods are methods whose members cannot be changed

The following are examples of mutable members and methods.
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
   pri let mut val1:int;
   pri let val2:int;
   pub fn func() {
      print( self.val1, self.val2 );
   }
   pub fn add( val:int ) mut {
      self.val1 = self.val1 + val;
   }
}
let mut test = new Test( 1, 2 );
test.func(); // 1 2
test.add( 10 );
test.func(); // 11 2
#+END_SRC


In this example, val1 is mutable and val2 is immutable. Also, =func()= is immutable and =add()= is mutable.

*Mutable methods declare mut after the argument is declared.*

The mutable method =add()= sets the value in member val1. It can be built without error.

So what happens if you remove the mut declaration of method =add()= as follows?
#+BEGIN_SRC lns
// @lnsFront: error
class Test {
   pri let mut val1:int;
   pri let val2:int;
   pub fn func() {
      print( self.val1, self.val2 );
   }
   pub fn add( val:int ) {
      self.val1 = self.val1 + val;  // error
   }
}
#+END_SRC


The above example will result in an error.

If you try to change a member from within a method that is not mutable, you will get an error.

You will also get an error if:
#+BEGIN_SRC lns
// @lnsFront: error
class Test {
   pri let mut val:int;
   pub fn increment() mut {
      self.val = self.val + 1;
   }
   pub fn func() {
      self.increment(); // error
   }
}
#+END_SRC


In the above example, =func()= calls =increment()=, but immutable methods cannot call mutable methods.


* allmut member

As mentioned earlier, if a class member is mutable, but the instance of that class is immutable, then that member is immutable.

In the following example, the mutable member val is accessed from within the =func()= method, but since the =func()= method is immutable, the val is also immutable and an error occurs.
#+BEGIN_SRC lns
// @lnsFront: error
class Test {
   pri let mut val:int;
   pub fn func() {
      self.val = self.val + 1;  // error
   }
}
#+END_SRC


mutablity is a necessary concept to prevent unintended changes in value. On the other hand, it is a very strict rule that no member can be changed from an immutable method.

If this rule is applied, it will be difficult to design in the following cases, for example.
- Consider a class Data that manages read-only data by associating it with a key
- In the Data class, define a method =get()= that returns the associated data when a key is given as an argument.
- The Data instance that registered all the data to be managed should be immutable to prevent unnecessary changes.
I think this is a general idea.

Then, suppose that the following specifications are added after the development progresses.
- In order to speed up the processing of the above =get()= method, the previous argument key and the data associated with that key are cached.
This process of "cache the previous argument key and the data associated with that key" will rewrite the data. That is, it must be mutable, not immutable.

On the other hand, Data instances have already been declared immutable in many places. In other words, it cannot be cached.

Allmut is used in such cases. allmut declares a member mutablity and is always mutable independent of the instance mutablity.

The following is a sample of allmut.
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
   pri let allmut val:int;
   pub fn func() {
      self.val = self.val + 1;  // ok
   }
}
#+END_SRC


By declaring ~pri let allmut val:int;~ in this way, val will always be mutable. This makes it possible to rewrite val from the immutable method =func()=.

*However, allmut is just a remedy and should not be overused.*

*In particular, when performing asynchronous programming with go described later, safety is not guaranteed if allmut is present.*


* Constructor definition

The constructor can be defined with __init.

Constructors differ from method definitions in the following ways:
- The constructor name must be __init.
- The return type cannot be specified.
- The constructor definition must come after all member definitions.
- If you inherit from a class, you must first execute the constructor for that class.
  - Execution of the constructor of the super class uses =super()=.
- The constructor must initialize all members.
  - If you do not explicitly initialize members of type nilable, the default value is nil.
- The method defined in the class can be accessed only after all the members have been initialized by the process in the constructor.
  - However, static methods and methods of super class can be accessed.
  - Also, the method can be accessed from the function object defined in the constructor.
- You cannot call a method that just declares a prototype from within the constructor.
- You cannot return in the constructor.
The following is an example of the constructor.
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
   pri let val1:int;
   pri let val2:int;
   pub fn __init() {
      self.val1 = 0;
      self.val2 = 0;
   }
}
let test = new Test();
#+END_SRC


The constructor can also set initial values for immutable members.


** Constructor arguments

The constructor can have arguments. This argument is given by the new operator.
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
   pri let val1:int;
   pri let val2:int;
   pub fn __init( val1:int, val2:int ) {
      self.val1 = val1 + 10;
      self.val2 = val2 + 10;
   }
   pub fn func() {
      print( self.val1, self.val2 );
   }
}
let test = new Test( 1, 2 );
test.func(); // 11 12
#+END_SRC



** Default constructor

If you do not define a constructor, a constructor that sets all members is automatically generated. This constructor is called the default constructor.

The default constructor has arguments to set all members. The order of the arguments is the order in which the members of the class are declared.

The following class declaration does not declare a constructor, so a default constructor is generated internally.
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
   pri let val1:int;
   pri let val2:int;
}
#+END_SRC


Its default constructor is defined as:
#+BEGIN_SRC lns
// @lnsFront: skip
   pub fn __init( val1:int, val2:int ) {
      self.val1 = val1;
      self.val2 = val2;
   }
#+END_SRC


The default constructor access control is pub.


*** Default constructor for derived classes

There are two types of default constructors for derived classes: old and current.


**** Current format

The current form default constructor for a derived class Sub is:
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
   pro let val:int;
}
class Sub extend Test {
   let val2:int;
   pub fn func() {
      print( self.val, self.val2 );
   }
}
let sub = new Sub( 1, 2 );
sub.func(); // 1, 2
#+END_SRC


Like ~new Sub( 1, 2 )~ above, it is an argument of the constructor of the super class + all members of the derived class.


**** Old format

The old-style default constructor for a derived class Sub is:
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
   pro let val:int!;
}
class Sub extend Test {
   let val2:int;
   _lune_control default__init_old;
   pub fn func() {
      print( self.val, self.val2 );
   }
}
let sub = new Sub( 2 );
sub.func(); // nil, 2
#+END_SRC


It will be all members of the derived class, as in ~new Sub( 2 )~ above.

In the old format, all arguments of the super class must be nilable. You also need to declare in ~_lune_control default__init_old;~ that you want to use the old-style default constructor. This declaration must be declared after declaring all members.


*** Explicit default constructor

The default constructor is generated internally if you do not define a constructor.

However, this behavior becomes a problem when writing the following processing.
#+BEGIN_SRC lns
// @lnsFront: error
class Test {
   pri let mut val:int {pub};
   pub static fn create(): Test {
      return new Test( 1 );  // error
   }
}
#+END_SRC


The above instantiates the Test class within the =create()= method, but fails with no constructor declaration.

Originally, the default constructor is generated because there is no constructor definition, but since the timing to define the default constructor is done at the end of the class definition, the =create()= method in the class definition does not have a constructor.

In such cases, explicitly declare to use the default constructor.

Here is an example:
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
   pri let mut val:int {pub};
   _lune_control default__init;
   pub static fn create(): Test {
      return new Test( 1 );
   }
}
#+END_SRC


By declaring ~_lune_control default__init;~, you can specify the use of the default constructor, and the default constructor will be generated at this time.

Note that ~_lune_control default__init;~ must be declared after all members, just like a regular constructor.


* Class members

Just as a method has a class method, a member has a class member.

Just add static to the class member definition.

Class members are initialized in the __init block.

The following is an example of a class member definition.
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
   pri static let val1:int;
   pri static let val2:int;

   __init {
      Test.val1 = 1;
      Test.val2 = 1;
   }
}
#+END_SRC


The __init block has the following restrictions:
- The __init block definition must come after all class member definitions.
  - If you do not explicitly initialize members of type nilable, the default value is nil.
- The __init block must initialize all members.
- You cannot return inside the __init block.
- You can call class methods from the __init block, but the class methods you call must be declared before the __init block.


* summary

LuneScript class definitions support the following:
- Define a class with the keyword class
- Instance creation is new
- Access control possible
- Access yourself with the self symbol
- Separate class definition and method definition
- prototype declaration
- Static class methods, class members
- The constructor is __init
- If you do not create a constructor, a default constructor will be created

Next time, I will explain how to generate an accessor.
