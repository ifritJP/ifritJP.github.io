#+TITLE: A. Transcompiler development recommendations
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

The final article on the Advent Calendar introductory to LuneScript will change the mindset and deal with transcompiler development itself.


* Reasons for promoting transcompiler development

I am developing a transcompiler called LuneScript.

Through this development, I feel that I have had a good experience as an engineer.

The reason for developing LuneScript is described in the next article.

[[../reason]]

I decided to write this article because I wanted many people to experience transcompiler development for the following reasons.
- Can constructively resolve dissatisfaction with the current situation
- You can check the trend technology
- Can correct coding rules
In the following, we will explain each of the above items.


** Can constructively resolve dissatisfaction with the current situation

Are you dissatisfied with your current software development?
- I don't like my boss
- The performance of the development PC is shobo,
- The salary is cheap,
- There is a lot of overtime
*The "dissatisfaction" I am talking about is not the "dissatisfaction with the real world" surrounding software development mentioned above.*

To realize the ideas in my head when developing software
- It's easy to bug due to language specifications
- You can only write in a very time-consuming and troublesome way
- You have to make the utility-like things necessary to realize it from scratch, and it takes too much time to reach what you originally wanted to make.
- In the first place, it can not be realized in terms of language specifications
I'm dissatisfied with the programming language.

For those who have such dissatisfaction and have specific ideas for resolving the dissatisfaction, we recommend developing a transcompiler.

This is the number one reason I decided to develop a transcompiler myself.

"If you don't have one, you can make it yourself."

Isn't it a "software engineer" because he has the ability to realize ideas with software?


*** Why it's a "transcompiler" rather than a "compiler"

"Why is it a" transcompiler "instead of a" compiler "? You may be wondering.

This is because the "transcompiler" has lower technical hurdles than the "compiler". With the advent of LLVM, I think the hurdles for compiler development are lower than before, but the hurdles for transcompilers are still lower.

In particular, the "cause-seeking cost" when there is a bug in the compiled code is overwhelmingly lower with the transcompiler.

I think it's okay if the purpose is to make a compiler, but making a compiler is a means, and the purpose is to solve "dissatisfaction with programming languages".

It would be better if it could be achieved at the lowest possible cost.

Besides, most of the "dissatisfaction with programming languages" can be solved by a transcompiler.

Of course, if you have a complaint like "I want to shorten the compilation time", I think that I have to develop the compiler by myself, but most of the other complaints can be solved by the transcompiler.

Even if the ultimate goal is to build a compiler
- First, create a transcompiler,
- Demonstrate that dissatisfaction can be resolved and that it is easy to use as a language,
- I found it beneficial to use that transcompiler,
- After that, when I needed to compile directly to native
Ultimately, developing a compiler is an efficient way to do it.


*** Why it's a "transcompiler" rather than an "interpreter"

I mentioned above why it is not a "compiler".

Here's why it's not an "interpreter".

That said, the reason is the same as when it was a "compiler", because it has a "lower hurdle" than an "interpreter".

Creating an interpreter is a lower hurdle than a compiler. I myself have made several simple interpreters.

But when it comes to practical interpreters, it's a different story. When it comes to a practical interpreter, there are problems with development man-hours and problems with execution performance. As I wrote when I was a compiler, the purpose is to solve "dissatisfaction with programming languages", so let's not think about anything else.

There are many practical interpreted languages (scripting languages) in the world now. You don't have to bother to make it yourself.


*** Easy to understand output result

One of the advantages of a transcompiler over a compiler is that the output code of the transcompiler is easy for many to understand.

As for which is easier to understand, the "native code" output by the compiler or the "code in a certain language" output by the transcompiler, everyone agrees that the "code in a certain language" is easier to understand. ..

"Why should it be easy to understand?" Means that the introduction risk is that low.

When introducing a new technology into a project, you need to determine if it is "safe".

There are various points of view even if we simply say "safety".
- "Information security" that guarantees that no virus-like things have entered
- Whether it can be exported overseas or is subject to the "Foreign Exchange Law"
- Is there a problem with the license? Even if the license of the part created by the author of the compiler is okay, is there a license issue in the code that the author unintentionally uses?
In order to introduce other new ones, it is necessary to clear some safety.

In clearing these safety, the clarity of the target technology is very important.

For compilers, it's impractical to look at the generated native code, so you'll have to look at the compiler's code to make sure it's safe.

The transcompiler, on the other hand, only needs to look at the license and the converted code.


** You can check the trend technology

If you are developing a new transcompiler, it is the nature of the engineer to try to make it as easy to use as possible.

If so, it is customary to investigate the characteristics of different languages and capture the good ones.

As I developed LuneScript, I intend to research as many languages as possible and incorporate various features.

What does it mean to know the characteristics of different languages? For example, does it make sense for engineers who are usually only involved in C language projects to know the characteristics of Go and swift? I'm sure some people wonder about that.

If you are a person who usually collects new information on sites such as Qiita, you will not have any doubts about such things, but if not, many people will wonder. ..

I think that even engineers who are usually involved only in C language projects should understand the characteristics of Imadoki's language.

The reason is that even if the characteristics of Imadoki's language itself cannot be used in C language, ideas and essences can be introduced in C language as well.

For example, the idea of a functional language itself can be realized in C without using Haskell.

Of course, there are things that are difficult to write with C language syntax, and things that cannot be realized due to the C language specifications.

However, there is a difference between writing in C language after knowing the concept of functional language itself and writing in C language as usual because you only know C language.

In addition, incorporating the characteristics of the Imadoki language as a function of the transcompiler enables a deeper understanding than simply using the Imadoki language. Or rather, it cannot be captured without a deep understanding.

In this way, it can be said that the development of a transcompiler is a good experience to deepen the understanding of the characteristics of Imadoki's language.


** Can correct coding rules

This is a little different from what I've mentioned so far, but I think it's quite important.

I think everyone has an ideal way of writing, such as "I want to write this" and "I should write this" when coding.

Developing a transcompiler also means that you can correct (enforce) your coding rules at the language level.

Many people may wonder, "What do you mean?" With this explanation, but I think you can say "block by indentation" in python.

Python represents blocks by indentation rather than keywords or delimiters.

In other words, instead of binding "blocks should be indented" with coding rules, Python corrects (forces) "if the indents are not aligned, it should not be treated as a block" at the language level.

Coding rules are often controversial. Developing your own transcompiler can prevent such useless controversy at the language level.

I wasn't really aware of it until I developed my own transcompiler, but there are some coding rules that I'm usually aware of that are no longer needed because they can't be implemented at the language level in another language. I found out.

When developing a new language, I think you should not only incorporate new features, but also review your usual coding rules and consider whether you can handle it at the language level.


* Finally

So far, I have made simple interpreters and [[../../ lctags /] [source code tag system]] as a hobby.

Through the development of LuneScript this time, I was able to realize another fun of software development.

I think many people think that there is no point in creating a new language. At least I thought so.

However, by developing LuneScript this time, I think I was able to grow as a software engineer again.

It's best if you can feel the growth yourself no matter what you think.

If you are dissatisfied with software development, please try to develop a new programming language.
