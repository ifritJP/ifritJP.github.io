#+TITLE: 10.3. Omission of arguments
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

In LuneScript, nilable type arguments can be omitted when calling a function.

For example, the following function =func()= can be called with no arguments.
#+BEGIN_SRC lns
// @lnsFront: ok
fn func( val1:int!, val2:int! ):int {
   when! val1, val2 {
      return val1 + val2;
   }
   when! val1 {
      return val1;
   }
   when! val2 {
      return val2;
   }
   return 0;
}
print( func(1,2) );  // 3
print( func(1) );    // 1
print( func() );     // 0
#+END_SRC


The problem here is that ~func(1)~ and ~func()~ cannot determine whether they intentionally omitted the argument or forgot to specify it.

Omitting arguments is a useful feature that saves you coding effort, but if you forget to specify the arguments you should have specified, you may not be able to detect them.

To avoid this, you can prevent forgetting to specify by defining the argument as follows and prohibiting the omission of the argument.
- Do not use nilable type arguments
- Define non-nilable type arguments after nilable type arguments
However, if you forbid the omission of arguments, you have the following problems:
- Coding effort will increase.
- Useless argument specifications increase, and the readability of the code deteriorates.
To avoid the problem of forgetting to specify an argument while omitting the argument, LuneScript introduces an explicit argument omission.


* Explicit omission of arguments

LuneScript uses ~##~ to omit the argument.

When calling =func()= above, it looks like this:
#+BEGIN_SRC lns
// @lnsFront: skip
print( func(1,2) );  // 3
print( func(1##) );  // 1
print( func(##) );   // 0
#+END_SRC


By adding ~##~ to the part where the argument is omitted, it is specified that the argument is omitted there.

If ~##~ is omitted without being specified, a warning will be issued.

This prevents the argument from being omitted and the argument from being forgotten to be specified.

Treat warnings as errors by adding the -Werror option when transcompiling.

On the contrary, if it is troublesome to specify ##, you can suppress the warning when ~##~ is omitted without specifying it by adding the --disable-checking-define-abbr option.
