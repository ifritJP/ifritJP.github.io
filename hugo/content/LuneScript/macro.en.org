#+TITLE: 24. Macro edition
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

This time, I will explain about LuneScript macros.


* macro

LuneScript supports macros.

*Perhaps it makes more sense these days to say metaprogramming rather than macros.*

To explain "what is a macro", it is easier to explain the difference from a function.

*A function is a collection of certain processes. On the other hand, macros can define multiple function definitions themselves together. Of course, you can define not only function definitions but almost all processes that can be defined as macros.*

I think Lisp is the most major programming language for macros, but LuneScript macros aren't as powerful as Lisp. However, it is not as restrictive as C macros.


** Simple macro example

The following is an example of a simple macro.
#+BEGIN_SRC lns
// @lnsFront: ok
macro _Hello() {
   print( "hello world" );
}
_Hello(); // hello world
#+END_SRC


This is the macro _Hello that displays hello world.

The macro definition uses the macro keyword.

This example is a macro that is exactly the same as using a function definition, and there is no point in defining it as a macro.

However, it is a good example to convey that "macros can be defined in the same way as function definitions".

In programming languages equipped with macros, macro definitions often require special processing, unlike general function definitions.

This raises the hurdle of mind that "macro seems to be difficult".

However, with LuneScript, you can define macros in the same way as general function definitions, as in the hello world sample above.

However, you cannot define a meaningful macro by writing a macro like the above example.

The following describes how to define meaningful macros.


** Macro example

Here's an example of a slightly more practical macro:

This macro has the following specifications.
- Macro _Test that defines a function that returns a value of int
- The int value returned by the function is given as a macro argument.
- The name of the function to be defined is determined by the value of int
- Specifically, the function name that returns 1 is func1.
Below is the specific macro code.
#+BEGIN_SRC lns
// @lnsFront: ok
macro _Test( val:int ) {
   {
      let name = "func%d"(val);
   }
   fn ,,,name(): int {
      return ,,val;
   }
}

_Test( 1 );
_Test( 10 );

print( func1(), func10() ); // 1  10
#+END_SRC


Expanding a macro is almost the same as a function call.

In this case, _Test (1) and _Test (10) are macro expansions. _Test (1), _Test (10) expands to:
#+BEGIN_SRC lns
// @lnsFront: ok
// Test( 1 )
fn func1():int {
   return 1;
}
// Test( 10 )
fn func10():int {
   return 10;
}
#+END_SRC


This defines the functions func1 () and func10 (), so ~print( func1(), func10() )~ outputs 1 10.

This macro is described below.


** How to write a macro

The syntax for defining a macro is:
#+BEGIN_SRC lns
// @lnsFront: skip
macro name( arg ) {
   {
      macro-statement
   }
   expand-statement
}
#+END_SRC


Start with the keyword macro, followed by the macro name name, the argument arg, and so on. The macro name name must start with _. Conversely, non-macro symbol names must start with something other than _.

Macro arguments support the following types:
- int
- real
- str
- bool  
- stat
- List, Map, Set above
- sym
- __exp
- __block
sym, stat, __exp, __block will be described later.

This is followed by the macro-statement block and the expand-statement.

To understand how to define a macro, it's easier to understand expand-statement first, so let's talk about expand-statement before we talk about the macro-statement block.


*** argument

The following can be used as the argument types dedicated to macros.
- sym
- stat  
- __exp
- __block


**** sym

sym is a type that can store symbols.

Symbols can be used as functions, variables, members, classes, all symbols.


**** stat

stat is a type that can store statements.


**** __exp

__exp is a type that can store all expressions.

You can specify any expression, for example =1 + 1= or =func()=. However, the expression must be error-free and evaluable when you call the macro.


**** __block

__block is a type that can store the block statement ={}=.

Like __exp, it must be a block that can be evaluated without error when calling the macro.


*** expand-statement

expand-statement writes the code after expanding the macro.

In the _Test macro example, the following part is the expand-statement.
#+BEGIN_SRC lns
// @lnsFront: skip
   fn ,,,name(): int {
      return ,,val;
   }
#+END_SRC


This expands the function definition.

Macro-specific operators are available in this expand-statement. ,, is the operator.

The available operators are:
- ,,,,
- ,,,
- ,,
*,,,, are operators that convert the symbol obtained by evaluating the variable that follows it into a string.*

*,,, are operators that convert the string obtained by evaluating the variable that follows it into a symbol.*

*,, are operators that expand the variables that follow.*

That is, in the above example, ,,, name converts the string in the name variable to a symbol, and ,, val expands the val variable, and the ~_Test( 1 )~ macro expands to:
#+BEGIN_SRC lns
// @lnsFront: ok
fn func1():int {
   return 1;
}
#+END_SRC


You can write any code in expand-statement, provided that the following restrictions are met:

*expand-statement must be a statement.*

In other words, expand-statement can be written in any code as long as it is not a statement, such as an expression or part of an incomplete token.

You can also write multiple statements in expand-statement.


*** macro-statement

In the macro-statement block, define the variables used in expand-statement. Variables used in expand-statement must be declared in the top-level scope of the macro-statement block.

In the _Test macro example, next is macro-statement.
#+BEGIN_SRC lns
// @lnsFront: skip
   {
      let name = "func%d"(val);
   }
#+END_SRC


Here we define the variable name. "Func% d" (val) is set as the initial value of name.

Within the macro-statement, you can take advantage of all the features of LuneScript. Specifically, you can also define functions in macro-statement.

For example, the _Test macro can also be written as:
#+BEGIN_SRC lns
// @lnsFront: ok
macro _Test( val:int ) {
   {
      fn funcname(): str {
         return "func%d"(val);
      }
      let name = funcname();
   }
   fn ,,,name(): int {
      return ,,val;
   }
}
#+END_SRC


In this example, the macro-statement declares the =funcname()= function and assigns the result to the name variable.

Note that the only functions that can be used in macro-statement are the standard LuneScript functions. Even a function defined in the same source cannot be used from macro-statement if the function is defined outside the macro.

macro-statement can use macro-only operators like expand-statement.

Specifically, the following operators are available:
- ,,,,
- ,,,
- ,,
- ~`{}~
- ~~  
*",,,," ",,," ",," is almost the same as expand-statement. The difference from expand-statement is that expand-statement processes the variable that immediately follows it, while macro-statement processes the expression that immediately follows it.*

~`{}~ can use the statement written in ~`{}~ as the value as it is.

For example, the above _Test macro can also be written using ~`{}~ as follows:
#+BEGIN_SRC lns
// @lnsFront: ok
macro _Test( val:int ) {
   {
      let defstat = `{
         fn ,,,"func%d"(val)~~():int {
            return ,,val;
         }
      };
   }
   ,,defstat;
}

_Test( 1 );
_Test( 10 );

print( func1(), func10() ); // 1  10
#+END_SRC


Here, ~`{}~ is used to store the function definition itself in the variable defstat, and defstat is expanded by expand-statement.

The initialization part of this defstat is extracted as follows.
#+BEGIN_SRC lns
// @lnsFront: skip
      let defstat = `{
         fn ,,,"func%d"(val)~~():int {
            return ,,val;
         }
      };
#+END_SRC


*Here you can see that we are using ~~.*

*~~ specifies the expression delimiter for operators such as ,,,. In the above, ~~ is used after "func% d" (val). This indicates that the expression that applies the ,,, operator is up to "func% d" (val), after which () is part of the macro-expanding statement.*

If you do not specify ~~, the string generated by "func% d" (val) will have () added, resulting in a syntax error.

The following is an example of a list of ~`{}~.
#+BEGIN_SRC lns
// @lnsFront: ok
macro _Test( val:int ) {
   {
      let mut statList:List<stat> = [];
      for count = 1, val {
         statList.insert(
            `{          
               fn ,,,"func%d"(count)~~():int {
                  return ,,count;
               }
            } );
      }
   }
   ,,statList;
}

_Test( 5 );

print( func1(), func2(), func3(), func4(), func5() ); // 1 2 3 4 5
#+END_SRC


In this example, multiple function definitions (func1 to func5) are created by storing multiple function definitions in the list statList of ~`{}~ and expanding them.

The macro-statement block is not required. If you omit the macro-statement block, omit each {} as follows.
#+BEGIN_SRC lns
// @lnsFront: skip
macro name( arg ) {
   expand-statement
}
#+END_SRC



*** Functions available in macro-statement

The following functions are available in macro-statement:
- fn _lnsLoad( name:str, code:str ): stem;
This function loads the LuneScript code specified by code and returns its module.


*** Macro expansion

The method of expanding the macro is the same as the function call.


** Public macro

Macros can be exposed to external modules.

You can make the macro available to the import destination by declaring pub as follows:
#+BEGIN_SRC lns
// @lnsFront: ok
pub macro _Hello() {
   print( "hello world" );
}
#+END_SRC



** A little practical macro example

The following is an example of a slightly more practical macro.

In order to handle JSON used in REST API parameters and responses provided by Google etc. in LuneScript, it is convenient to classify it for each REST API JSON format. At such times, manually defining classes that handle multiple types of JSON-formatted data is inefficient and a source of bugs.

So we'll load the sample JSON format and create a macro that defines a class that can store that JSON format.

In this example, we read the following JSON file and
#+NAME: hoge.js
#+BEGIN_SRC js
{
    "val1": "abc",
    "val2": 0
}
#+END_SRC


It is a macro that defines the following class to handle the above JSON.
#+BEGIN_SRC lns
// @lnsFront: ok
class Hoge {
  pri let val1:str {pub};
  pri let val2:int {pub};
}
#+END_SRC


The following is a concrete example of a macro.
#+BEGIN_SRC lns
// @lnsFront: skip
macro _MkClass( name:str, path:str ) {
   {
      let mut memStatList:List<stat> = [];
      if! let mut fileObj = io.open( path ) {
         if! let txt = fileObj.read( "*a" ) {
            let defMap = "pub let val = %s;" (txt);
            let mod = _lnsLoad( "json", defMap );
            if! let jsonval = mod.val {
               fn getType( val:stem ): str {
                  switch type( val ) {
                     case "number" {
                        return "int";
                     }
                     case "string" {
                        return "str";
                     }
                  }
                  return "stem";
               }
               forsort val, key in jsonval@@Map<str,stem> {
                  memStatList.insert( `{
                     pri let ,,,key : ,,,getType( val )~~ {pub};
                  } );
               }
            }
         }
      }
   }
   class ,,,name {
      ,,memStatList;
   }
}
_MkClass( "Hoge", "hoge.js" );

let hoge = new Hoge( "ABC", 100 );
print( hoge.$val1, hoge.$val2 );
#+END_SRC


This macro reads JSON from a file and declares a class to store that JSON structure.

The class name is specified by the first argument of the macro.

This macro does the following:
- Open the specified file and read the JSON string defined in that file.
- From the JSON string txt, generate the LuneScript code with "pub let val =% s;" (txt) ;.
- Use =_lnsLoad()= to load the generated LuneScript code
- Extract the json val from the loaded module and list the JSON elements with forsort
- Generate ~`{}~ that declares the members that hold the enumerated elements and add it to memStatList
- Declare the class with name and memStatList.
In this sample, the members are treated as int and str type data for ease of processing. Lists etc. are not supported.


** Common Map between macros

Macros are processes that are executed at compile time. Also, macro execution is independent of each other. When executing two macros A and B, it is not possible to change the control of macro B depending on the execution result of macro A.

However, this can be inconvenient. Therefore, sharing data within macros is a common map between macros.

** This is an experimental function.*

You can use the special variable =__var= from within the macro-statement of the macro.

The special variable __var has the following restrictions:
- Public macros cannot use __var
- Macros that access __var must be used from the same namespace that defines them.
- If you access __var from a different namespace, the contents of that __var are undefined.

The types of this variable are:
: let mut __var:Map<str,stem>


This variable is generated at the beginning of compilation of each module and all macros access the same variable.

Here is an example:
#+BEGIN_SRC lns
// @lnsFront: ok
   macro _test0( name:str, val:int ) {
      {
         __var[ name ] = val;
      }
   }
   macro _test1() {
      {
         let val;
         if! let work = __var[ "hoge" ] {
            val = work@@int;
         }
         else {
            val = 10;
         }
      }
      print( "%s" (,,val) );
   }
   _test0( "hogea", 1 );
   _test1(); // 10
   _test0( "hoge", 1 );
   _test1(); // 1
#+END_SRC


In this example, the _test0 () macro holds int data in =__var[ "hoge" ]=, and the _test1 () macro modifies the processing according to the stored value of =__var[ "hoge" ]=.


* summary

LuneScript allows you to define macros as if you were a function.

Also, by using macros, you can define various processes.

Next time, I'll show you how to build a project that you develop using LuneScript.
