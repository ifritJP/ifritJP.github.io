#+TITLE: 01. Introduction
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

This time, I will introduce how to install LuneScript.


* LuneScript on Web Browser 

To check the operation of LuneScript, we have prepared a LuneScript environment that runs on a web browser.

[[../onweb]]

In addition, the following sample sources may have a Run button. You can run the sample source by pressing that button. And you can modify the source and run it.

It takes a few seconds to 10 seconds for the first time from pressing the Run button to running the sample (the time depends on the network environment and terminal specifications). This is to load the Lua VM and the LuneScript compiler on the browser.

If you load it once and then re-execute it, this loading process is not performed and you can execute it instantly.


* How to install LuneScript

LuneScript offers two delivery methods:
- Single binary go version that can be run independently
- Lua version that acts as a Lua script


** go version

We have prepared a Dockerfile for building LuneScript from the source registered in git.

https://github.com/ifritJP/LuneScript/tree/master/src/test/docker/compose
- linux/build/Dockerfile
- alpine/build/Dockerfile
The following will generate lnsc for Linux in LuneScript / src:
: $ git clone --depth 1 https://github.com/ifritJP/LuneScript
: $ cd LuneScript/src
: $ sudo docker build -t linux_lns test/docker/compose/linux/build
: $ sudo docker run --rm -v $PWD:/local linux_lns cp /usr/bin/lnsc /local/lnsc


Put lnsc in your PATH.

In the proxy environment, specify proxy as shown below when docker build.
: $ sudo docker build -t linux_lns test/docker/compose/linux/build --build-arg PROXY=http://proxy.hoge/


This concludes the introduction of the go version of LuneScript.


** Lua version

LuneScript is a Lua transcompiler. LuneScript itself also acts as a Lua script.

Therefore, the Lua version of LuneScript requires a Lua runtime environment.

The Lua versions supported by LuneScript are 5.1, 5.2, 5.3, 5.4.

However, there are some restrictions when using it with Lua 5.1. I'll discuss the specific restrictions in a separate article.

*Postscript: 12/10 (About Lua 5.1 support)*

The version of Lua installed by default on your system is often 5.1 series.

Check the installed version of Lua with the following command.
#+BEGIN_SRC txt
$ lua -v 
#+END_SRC



*** Introduction of Lua

You can download Lua from the following URL:

http://www.lua.org/download.html

On Linux, it's easy to deploy with package management, but be careful with your Lua version.

For example, in apt type package management such as ubuntu, it can be installed with the following command.
#+BEGIN_SRC sh
$ sudo apt install lua5.3
#+END_SRC



**** For Windows

On Windows, you need the cygwin version of Lua.

The transcompiled Lua code works even if it's not a cygwin version.

However, LuneScript itself assumes a linux environment, so cygwin is required.

Be sure to have a cygwin version of Lua.

We'll see later if it works on Windows Subsystem for Linux.


*** Introducing LuneScript

As mentioned earlier, LuneScript acts as a Lua script.

Lua's module management is very simple, just put the files in the Lua-managed module directory.

The LuneScript module is published on github.

https://github.com/ifritJP/LuneScript

You can also set up by manually copying the files, but the following describes how to set up using LuneScript's setup.lua.

Manually copying files is difficult unless you are familiar with Lua's module management.


**** How to install LuneScript

Run LuneScript setup.lua.

The procedure is as follows.
#+BEGIN_SRC sh
$ git clone https://github.com/ifritJP/LuneScript.git
$ cd LuneScript/src
$ lua5.3 setup.lua -d
$ sudo make install
#+END_SRC


This will install LuneScript in the module directory.

If you want to specify the Lua module directory where you want to install LuneScript, remove -d from ~lua5.3 setup.lua -d~ and run it.


**** Module directory managed by Lua

You can check the module directory managed by Lua with the following command.
#+BEGIN_SRC sh
$ lua5.3 -e 'print( package.path )'
#+END_SRC


The result of the above command is as follows. (Depends on the environment)
#+BEGIN_SRC sh
/usr/local/share/lua/5.3/?.lua;/usr/local/share/lua/5.3/?/init.lua;/usr/local/lib/lua/5.3/?.lua;/usr/local/lib/lua/5.3/?/init.lua;/usr/share/lua/5.3/?.lua;/usr/share/lua/5.3/?/init.lua;./?.lua;./?/init.lua
#+END_SRC


If you separate this with;, it will be as follows.
- =/usr/local/share/lua/5.3/?.lua=
- =/usr/local/share/lua/5.3/?/init.lua=
- =/usr/local/lib/lua/5.3/?.lua=
- =/usr/local/lib/lua/5.3/?/init.lua=
- =/usr/share/lua/5.3/?.lua=
- =/usr/share/lua/5.3/?/init.lua=
- =./?.lua=
- =./?/init.lua=
I won't go into details, but the following directories are the module directories managed by Lua.
- =/usr/local/share/lua/5.3=
- =/usr/local/lib/lua/5.3=
- =/usr/share/lua/5.3=
- =./=
*The directory depends on your environment.*

You can also specify the module directory by using environment variables, but the explanation here is omitted.


* emacs settings

LuneScript provides emacs lisp for developing with emacs.

Make the following settings.
#+BEGIN_SRC lisp
  (add-to-list 'load-path "my-lune-path")  ;;; clone した LuneScript のパスを指定
  (setq lns-lua-command "/usr/local/bin/lua")  ;;; lua のパス
  (require 'lns-conf)
  (require 'lns-flymake)
  (require 'lns-company-mode)
  (require 'lns-helm)
#+END_SRC


This makes the following available:
- .lns file indentation and coloring
- Syntax check with flymake
- Completion by company-mode
Syntax checking supports flymake and flycheck. If you want to use flycheck, require lns-flycheck instead of lns-flymake.

For helm, company-mode, flycheck and flymake, please install M-x package-install separately.


* Project file

LuneScript makes use of the directory hierarchy for module management. Therefore, the current directory is important when transcompiling with LuneScript.

By placing a file with the following name in the current directory when transcompiling, it will be treated as a project file.
: lune.js


Be sure to generate the above file, especially if you edit the LuneScript source with an editor, as this file will be searched to find out where the project directory of the LuneScript source is.


** Project file format

The project file is in JSON format.

At a minimum, create a lune.js file with the following content:
#+BEGIN_SRC js
{}
#+END_SRC


The directory where this file is placed will be the starting directory of the module.

For example, in the case of the following directory structure,
#+BEGIN_SRC txt
foo/
foo/lune.js
foo/bar/
foo/bar/mod1.lns
#+END_SRC


bar.mod1 is the module path for mod1.lns.


** Added command line options

By setting LuneScript command line options in the project file, the command line options set in the project file during transcompiling will be used.

To set command line options, use the =cmd_option= key to set the string list as follows:
#+BEGIN_SRC js
{
    "cmd_option": [ "--valid-luaval" ]
}
#+END_SRC



* summary

Lua's module management is so simple that it's easy to deploy.

Next time, I will introduce Hello World by LuneScript.
