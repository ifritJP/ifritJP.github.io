#+TITLE: 19. generics edition
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

This section describes the generics that LuneScript supports.

LuneScript initially supported Generics only for built-in Lists / Arrays / Maps, but it also supports Generics for user-defined functions and classes.


* function

The function Generics is declared as follows:
#+BEGIN_SRC lns
// @lnsFront: ok
fn func<T>( val:T ) : Set<T> {
   return (@ val);
}
#+END_SRC


As you can see from the above sample, when declaring a function, declare it with the function name + ~<Temporary parameter>~.

Where func <T> () is a function that creates a Set <T> with an argument value.

You can specify multiple formal parameters.
#+BEGIN_SRC lns
// @lnsFront: ok
fn func<T1,T2>( val1:T1, val2:T2 ) : Set<T1>, List<T2> {
   return (@ val1), [ val2 ];
}
#+END_SRC



* nilable, mutable

Formal parameters have the same concept of nilable and mutable as regular types.

This allows you to write the following process:
#+BEGIN_SRC lns
// @lnsFront: error
fn func1<T>( val:T ) : T {
   return val;
}
fn func2<T>( val:T ) : &T {
   return val;
}
fn func3<T>( val:T ) : T! {
   return val;
}
let mut test1 = func1( [ 1, 2 ] );
test1.insert( 1 );
let mut test2 = func2( [ 1, 2 ] );
test2.insert( 1 ); // error test2 is not mutable
let mut test3 = func3( [ 1, 2 ] );
test3.insert( 1 ); // error test3 is nilable
#+END_SRC

- func1 returns the argument as is of type T.
- func2 returns the argument as immutable type & T.
- func3 returns the argument as nilable type T !.
This allows =test1.insert()=, but test2 and test3 will result in compilation errors.

One thing to keep in mind here is that you can use nilable and mutable when using formal parameters, but not when declaring formal parameter names. In other words, ~func1<T!>~ like the following will result in an error.
#+BEGIN_SRC lns
// @lnsFront: error
fn func1<T!>( val:T ) : T {
   return val;
}
#+END_SRC


Also, nilable is not available for formal parameters. That is, you will get an error if:
#+BEGIN_SRC lns
// @lnsFront: error
fn func1<T>( val:T ) : T {
   return val;
}
let val:int! = 1;
print( func1( val ) ); // error type mismatch
#+END_SRC


In this example, func1 (val) gives int! to func1 (), but ~func1<T>(val:T)~'s val is T and the formal parameter is an error because nilable is not available.

If you want to do this, declare it as follows:
#+BEGIN_SRC lns
// @lnsFront: ok
fn func1<T>( val:T! ) : T {
   return unwrap val;
}
let val:int! = 1;
print( func1( val ) ); // ok
#+END_SRC


In other words, ~fn func1<T>( val:T! )~ declares that the argument of func1 () is nilable.

However, it can be inconvenient if you can't handle the value of nilable. Nilable <T> is available for such cases.

This will be explained separately at a later date.


** sample

By using Generics, you can write the following processing.
#+BEGIN_SRC lns
// @lnsFront: ok
fn func<T>( val:T ) : Set<T> {
   return (@ val);
}
foreach val in func( "foo" ) {
   print( val .. "bar" );  // foobar
}
foreach val in func( 1 ) {
   print( val + 100 );  // 101
}
#+END_SRC


func ("foo") produces a Set <str> of (@ "foo"), and func (1) produces a Set <int> of (@ 1).

As you can see from the above, the type parameters are determined according to the called argument.


*** effect

By using stem instead of generics, you can write similar processing as follows.
#+BEGIN_SRC lns
// @lnsFront: ok
fn func( val:stem ) : Set<stem> {
   return (@ val);
}
foreach val in func( "foo" ) {
   print( val@@str .. "bar" );
}
foreach val in func( 1 ) {
   print( val@@int + 100 );
}
#+END_SRC


However, in this case, type information such as str and int will be rounded to stem. You will need to cast ~@@str~ or ~@@int~ as it will be rounded to stem.

Casting is inconvenient and above all very dangerous.

By using Generics, you can access it safely without using a cast.


* class

The generics for the class are declared as follows:
#+BEGIN_SRC lns
// @lnsFront: ok
class Test<T> {
   let val:T;
   pub fn func() : List<T> {
      return [ self.val ];
   }
}
#+END_SRC


For classes, specify formal parameters when specifying the name of the class declaration.

When declaring a method outside the class declaration, it is not necessary to declare a formal parameter as shown below.
#+BEGIN_SRC lns
// @lnsFront: skip
pub fn Test.func2() : Set<T> {
   return (@ self.val );
}
#+END_SRC


Create an instance of the Generics class as follows:
#+BEGIN_SRC lns
// @lnsFront: skip
let test = new Test<str>( "abc" );
#+END_SRC


If all formal parameters are used in the arguments of the constructor, it is possible to omit the actual type parameters as follows.
#+BEGIN_SRC lns
// @lnsFront: skip
let test = new Test( "abc" );
#+END_SRC


*The interface does not support generics.*


* Method

A method can have both a class formal parameter and a method formal parameter.

In the following sample, the =Test.func()= method has a class formal parameter T and a method formal parameter T2.
#+BEGIN_SRC lns
// @lnsFront: ok
class Test<T> {
   let val:T;
   pub fn func<T2>(val:T2) : Map<T,T2> {
      return { self.val: val };
   }
}
let test = new Test( "abc");
foreach val, key in test.func( 1 ) {
   print( key .. "xyz", val + 10 );
}
foreach val, key in test.func( "ABC" ) {
   print( key .. "xyz", val .. "XYZ" );
}
#+END_SRC



* Type parameter constraints

All types except nil can be specified for the actual type parameter.

For this reason, processing for values of formal parameter types within generics classes and functions is limited to type-independent operations such as ~==~ and =~==.

If this is the case, you will not be able to write effective processing in the processing in Generics.

Therefore, we will use the constraint of the type parameter.


** sample

The following is a sample type parameter constraint.

Here, by declaring ~class Test<T:Val>~, the formal parameters of the Test class are limited to the Val class.

This allows you to call the Val class method =func()= for the value of val within the =Test.sub()= method.
#+BEGIN_SRC lns
// @lnsFront: ok
abstract class Val {
   pub abstract fn func(): str;
}
class Test<T:Val> {
   let val:T;
   pub fn sub() {
      print( "this is " .. self.val.func() );
   }
}
#+END_SRC


The following is a sample using this Test class.
#+BEGIN_SRC lns
// @lnsFront: ok
abstract class Val {
   pub abstract fn func(): str;
}
class Test<T:Val> {
   let val:T;
   pub fn sub() {
      print( "this is " .. self.val.func() );
   }
}

class Val1 extend Val {
   pub override fn func(): str {
      return "val1";
   }
}

class Val2 extend Val {
   pub override fn func(): str {
      return  "val2";
   }
}

fn func1( test:Test<Val1> ) {
   test.sub();
}
fn func2( test:Test<Val2> ) {
   test.sub();
}

func1( new Test( new Val1() ) );  // this is val1
func2( new Test( new Val2() ) );  // this is val2
#+END_SRC


The configuration of this sample is as follows.
- The Val1 and Val2 classes are classes that inherit from the Val class.
- The =func()= function has a Test type argument test and calls the =test.sub()= method.
- ~new Test( new Val1() )~ and ~new Test( new Val2() )~ instantiate the test type of the actual parameters of Val1 and Val2 and call the =func()= function.
As a result, =Val1.func()= and =Val2.func()= are called and ~this is val1~ and ~this is val2~ are output.

Note that T in ~Test<T:Val>~ must be Val, so a specification such as ~new Test<"abc">~ will result in an error.

Because "abc" is of type str, str is not of type Val.

By the way, the syntax of the formal parameter constraint is the same as the extend of class.

That is, it looks like this:
#+BEGIN_SRC lns
// @lnsFront: skip
class Hoge<T:SuperClass(IF,...)> {
}
#+END_SRC


Where SuperClass is a class and IF is an interface.

SuperClass and IF can be omitted respectively.


* Mapping of generics class

LuneScript has a Mapping feature that transforms an instance of a class into a Map object.

For mapping, refer to the following article.

[[../classmapping]]

To map a class, that class must extend the Mapping interface.

The following is a simple example.
#+BEGIN_SRC lns
// @lnsFront: ok
class Test<T> extend (Mapping) {
   let txt:str;
   pub fn func( val:T ) {
      print( self.txt, val );
   }
}

let test = new Test<int>( "hoge" );
let map = test._toMap();
if! let test2 = Test<int>._fromMap( map ) {
   test2.func( 1 );
}
#+END_SRC


The Test <T> class extends Mapping. This allows the Test <T> class to be mapped.

In the above case, nothing is different from the case of a regular class that is not generics. This is because it is not included in the members of the formal parameter type.

If you have a member of the formal parameter type as shown below, an error will occur.
#+BEGIN_SRC lns
// @lnsFront: error
class Test<T> extend (Mapping) {
   let txt:T;
}
#+END_SRC


This is because in order for a class to extend Mapping, all members held by that class must be able to map, whereas the formal parameter T, which is the type of member txt, is of all types except nilable. Because it can be.

To avoid this, set a Mapping constraint on the formal parameter used as the member type.

Specifically, it is ~Test<T:(Mapping)>~ as follows.
#+BEGIN_SRC lns
// @lnsFront: ok
class Test<T:(Mapping)> extend (Mapping) {
   let val:T {pub};
}

let test = new Test( "abc" );
let map = test._toMap();
if! let test2 = Test<str>._fromMap( map ) {
   print( test2.$val .. "xyz" );
}
#+END_SRC


This allows the Generics class to be mapped.
