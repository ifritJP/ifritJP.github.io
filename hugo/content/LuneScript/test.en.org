#+TITLE: X. Importance of self-hosting and test design in quality control of language development
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

If you're looking at this document, you're probably coding in a "programming language" every day. And many of you are busy crushing bugs that someone has put in.

Since the "programming language" that is taken care of every day is also software made by someone, quality control of how to prevent bugs is important.

I'm lucky (?), And I've never run into a language bug while using a programming language at work.

//There are some language standards that seem like bugs. .. ..//

If you run into a programming language bug, dealing with it can be one of the most annoying software bugs out there.

//It's hard to reach that it's a programming language bug in the first place.//

Here, I would like to introduce how to test my own language that I am developing.

Programming languages can be classified into the following two types.
- Compiler type
- Interpreter type
Since the language I'm developing is compiler type, I'll talk about compiler type testing from now on.

By the way, I will introduce LuneScript, my own language, in the next article.

https://qiita.com/dwarfJP/items/21d4d4099ab0feb68eaf

We hope that it will be of some help to those who are considering developing their own language in the future.


** Compiler is a function

The job of a compiler-type programming language is to convert code written in that programming language into machine language or the like.

for example,
- C language compiler converts to Native code
- Java compiler translates to JVM code
- Convert C # to CIL
- Clang translates to LLVM-IR, LLVM translates to various codes
In other words, a compiler can be thought of as "one large function that gives input and returns output according to that input."

If you think of the compiler as a function, its testing is very simple. You can test by giving various inputs and comparing the output with the expected value.

The idea is exactly the same as the UNIT TEST function that I create on a daily basis.


** Compiler testing

The proprietary language, LuneScript, has the following tests:
- Self-hosting LuneScript own build
- Normal system of all syntaxes supported by the language
- Abnormal system of all syntaxes supported by the language
Of particular importance here is self-hosting.

By self-hosting, you don't have to write test code, your own code becomes test code.

Creating meaningful test code on a reasonable scale can be a daunting task.

*Especially in the case of a unique language that no one else is using, it is not easy to find proper practical code instead of test code by searching github, so to some extent Scale test code is valuable.*

When you're self-hosting, your own code becomes that valuable test code.

However, even if you say "your own code becomes test code as it is", that alone is not enough testing. The syntax and design patterns used will be biased, and the test will be unsatisfactory in terms of completeness. Also, you can't put anomalous code that causes a compile error into your own self-hosted code. Therefore, self-hosting your own code is not enough as a test case, and you need a test to comprehensively check the normal system and a test to detect the compilation error.

For this normal system and abnormal system test, you can check the success or failure of the test by preparing the expected value in advance.

On the other hand, how should we determine "whether the result of compiling my own code is correct"? Is the problem.

Since the test case code is generally immutable, its compilation results are also immutable. This means that once you create a test case and expected value pair, you can continue to use the same expected value unless you change the test case.

On the other hand, the self-hosting code of your own will naturally change. In other words, the expected value changes constantly, so it is impossible to prepare the expected value in advance.

Now, how to determine if your self-hosted code compiles correctly is based on the following:
: 「使用中のコンパイラでのテストケースの結果」 == 「新しくコンパイルしたコンパイラでのテストケースの結果」


This is based on the assumption that the compiler you are using is working correctly, and the results of the test cases you ran with the compiler you are using and the results of the test cases you ran with the newly compiled compiler. The logic is that if they are the same, then the newly compiled compiler is also correct.

In addition, I am compiling myself again with the newly compiled compiler. I'm doing this to make sure that when I compile the same code, the output is exactly the same.

In summary, the LuneScript test does the following:
- step1 :: Compile your own self-hosted code to generate compiler B using your current compiler A
- step2 :: Use compiler B to compile your code again to generate compiler C
- step3 :: Use compiler C to compile your code again to generate compiler D
- step4 :: Make sure compiler C and compiler D are the same
- step5 :: Executes normal and abnormal tests of compiler A and saves the test results in result A
- step6 :: Executes normal and abnormal tests of compiler D and saves the test results in result D
- step7 :: Make sure result A and result D are the same
After passing the above tests, we will use compiler D as the latest compiler A next time. In addition, we will add tests for normal and abnormal systems with extended language specifications as needed.

In the case of self-hosting, if there is a problem, you may not be able to compile yourself, and you may not be able to proceed with development. This test ensures that the newly built compiler works properly and allows you to safely extend your language.

For your own language, the timing of your transition to self-hosting can be very important.

As the code scale of the compiler increases, the time required for porting work also increases, so when developing your own language with full scratch, prioritize the functions required for self-hosting and make it self-hosting at the earliest possible stage. We recommend that you migrate.


* Still bugs remain

I introduced the tests that I am conducting in my own language development, but unfortunately the bugs remain even if I test them.

There are two categories of causes for the bug:
- Case where abnormal system cannot be detected
- A case where it should work normally but it does not work
Of the above two, the overwhelming majority of cases cannot detect an abnormal system.

This is because the normal path needs to be confirmed to work by writing the code according to the language specification, while the abnormal path needs to write the code that does not meet the language specification to detect the error.

It is quite difficult to say that this "out of the language specifications", and there are often holes.

Rather than seeking a perfect test from the beginning, it is important for testing to find these "holes", add test cases to close them, and respond so that they can be detected when the same "hole" is opened again. I think.


* Finally

I think that the reason why we have continued to develop our own language is that we have proceeded with the following test policy.
- Early transition to self-hosting
  - If you move to self-hosting, you will inevitably need a certain level of quality assurance.
    - If the quality is poor, self-hosting will be hindered, so the quality will be maintained naturally.
- Don't aim for 100% test from the beginning
  - The purpose is to develop a proprietary language, not a test.
  - You can concentrate on your own language.
- What we have done in synchronization with the expansion of language specifications and the expansion of test codes
  - Can prevent omissions and degradation of tests
- Testing at the compiler I / O level, not at the function level
  - For function-level tests, it is necessary to change the test case every time the design is changed, but for tests at the compiler I / O level, there is no need to change the test case unless there is a change in the compiler specifications.
When developing your own language, I think it is efficient to aim for self-hosting first in terms of ensuring quality.

that's all.
