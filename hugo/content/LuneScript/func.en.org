#+TITLE: 10. Functions
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

This time, I will explain the functions of LuneScript.


* Function definition
The LuneScript function is defined as follows:
#+BEGIN_SRC lns
// @lnsFront: ok
fn add_sub( val1:int, val2:int ): int, int {
   return val1 + val2, val1 - val2;
}
print( add_sub( 1, 2 ) ); // 3, -1
#+END_SRC


The above example defines the following function:
|-|
| Definition | 
|-|
| Function name | add_sub | 
| First argument name | val1 | 
| First argument type | int | 
| Second argument name | val2 | 
| Second argument type | int | 
| First return type | int | 
| Second return type | int | 

LuneScript can return multiple return values.


*** Return value

Use the return statement for the return value of the function.

The function can return multiple values.

See below for multi-valued return values.

[[../multipleretval]]


* Function that does not return

Some functions do not return processing.

Here is an example:
#+BEGIN_SRC lns
// @lnsFront: error
fn func(): __ {
   while true {
   }
}
func();
print( 1 ); // error
#+END_SRC


In this example, =func()= is an infinite loop. Therefore, =func()= will not return any processing.

To make this clear, the return type of =func()= is ~__~. ~__~ indicates that it is a function that does not return processing.

This tells us that the next =print()= statement after =func()= will not be processed, resulting in an error.

Note that a function whose return type is ~__~ must not return processing.

For example, if you break as follows, the process will be returned from =func()= because the loop will be broken. In such a case, an error will occur.
#+BEGIN_SRC lns
// @lnsFront: error
fn func(val:int): __ {
   while true {
      if val == 1 {
         break;
      }
   }
}
#+END_SRC



* Variadic argument, return value

Variadic arguments and return values can be used.

See the following article for details.

[[../arg]]


* Definition location

Functions can be defined wherever a statement can be written. Specifically, it can be defined in the block as follows.
#+BEGIN_SRC lns
// @lnsFront: ok
fn sub():int {
   let mut val = 0;
   {
      {
         fn func(): int {
            return 1;
         }
         val = val + func();
      }
      fn func(): int {
         return 2;
      }
      val = val + func();
   }
   fn func(): int {
      return 3;
   }
   return val + func();
}
print( sub() ); // 6
#+END_SRC


Functions with the same name can be defined in different scopes.


* Public function

Functions, like variables, can be exposed to the outside world using pub.
#+BEGIN_SRC lns
// @lnsFront: ok
pub fn func(): int {
   return 1;
}
#+END_SRC


By specifying pub, it becomes a function that can be accessed from the outside.

global is also available.
#+BEGIN_SRC lns
// @lnsFront: ok
global fn func(): int {
   return 1;
}
#+END_SRC


The global declaration of a function has the same restrictions as the global declaration of a variable.

*"A function declared global is valid when the module that declares the function is imported."*

External exposure of functions has the following restrictions:

*"Externally exposed functions must be declared in the top-level scope of the script."*


* form type

*LuneScript can handle function objects as values. You can use form as the type of a special function object.*

The following is an example of using form.
#+BEGIN_SRC lns
// @lnsFront: ok
fn test() {
   print( "hoge" );
}
fn sub( func:form ) {
  func();
}
sub( test ); // hoge
#+END_SRC


This example has the following configuration:
- Define function test
- The function sub has an argument of type form
- Execute sub with test as an argument
This will run test inside sub and print hoge.

The form type is treated as the following function.
#+BEGIN_SRC lns
// @lnsFront: skip
fn func(...):... {}
#+END_SRC



** Function type that can be assigned to form type

As mentioned above, form is synonymous with ~fn func(...):... {}~.

Also, =...= represents zero or more =stem!=s.

That is, functions with stem! Arguments can be assigned to form types, and functions with non-stem! Arguments cannot be assigned.

If it can be assigned, the next call to func2 (nil) will call func (nil), which will result in incorrect behavior.
#+BEGIN_SRC lns
// @lnsFront: error
fn func( val:int ) {
   print( val + 1 );
}
let func2:form = func;
func2( nil );
#+END_SRC


The following are examples of substitutable and non-substitutable cases.
#+BEGIN_SRC lns
// @lnsFront: error
let form1:form = fn ( val1:stem! ) { };
let form2:form = fn ( val1:stem ) { };  // error
let form3:form = fn ( val1:stem!, val2:stem! ) { };
let form4:form = fn ( val1:stem!, val2:stem ) { }; // error
#+END_SRC


The above form1 and form3 can be assigned, and form2 and form4 cannot be assigned.


** form declaration

As mentioned above, form can handle only some types of functions.

To handle a function that cannot be handled by form, declare the form as follows.
#+BEGIN_SRC lns
// @lnsFront: ok
form funcform( val:int ):int;
fn sub( func:funcform ) {
   print( func( 1 ) + 1 );
}
sub( fn ( val:int ):int { return val + 1; } ); // 3
#+END_SRC


In this example, funcform is declared as form.

The form declaration makes funcform a functional type with an int type val as an argument and an int type as a return value.


* anonymous function

An anonymous function defines a function that has no name.

The following is an example of an anonymous function.
#+BEGIN_SRC lns
// @lnsFront: ok
fn sub( func:form ) {
  func( 1 );
}
sub( fn ( val:stem! ) { print( val ); } );  // 1
#+END_SRC


This example defines the anonymous function ~fn ( val:int ) { print( val ); }~.

By passing this anonymous function as an argument to =sub()=, the anonymous function will be executed within =sub()=.

Anonymous function declarations are expressions.


* Function call

Adding ~()~ to a function object will execute that function.

The types of the formal and actual arguments of the function must match. The omitted actual argument is treated as nil. If the formal argument corresponding to the omitted actual argument is not nilable, an error will occur.


** Omission of arguments

Check the following article for omission of arguments.

[[../defaultarg]]


* Function restrictions

LuneScript functions cannot be overloaded due to different arguments.


* summary

To summarize the LuneScript functions,
- Declare with fn
- Can have multiple return values
- Has variable length arguments and return values
- Publish functions to external modules with pub, global
- Function object types use form types and form declarations
- There is an anonymous function
- The omitted actual argument contains nil
- No function overload
Next time, I will talk about nilable.
