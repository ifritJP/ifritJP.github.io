#+TITLE: 04.3 タプル編
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

ここでは、 値の組み合わせであるタプルの扱いついて説明します。

タプルは v1.5.3 から利用可能です。

* タプルのコンストラクタ

タプルは次のように書くことでオブジェクトを生成します。

#+BEGIN_SRC lns
// @lnsFront: ok
let obj = (= 1, "abc" ); // 1 "abc"
#+END_SRC

これは、1, "abc" の値の組み合わせを保持するタプルです。

タプルは ~(= )~ で値を括ります。

*必ず 1 つ以上のデータを指定する必要があります*

* タプルの型宣言

上記処理は型推論により型宣言を省略していますが、
省略しない場合は次のように書きます。

#+BEGIN_SRC lns
// @lnsFront: ok
let obj:(int,str) = (= 1, "abc" ); // 1 "abc"
#+END_SRC

~(int,str)~ は、要素が int と str であるタプルの型を宣言します。

** タプル型の各要素の名称

タプル型の宣言時に、次のように各要素の型にシンボルを付けることが可能です。

#+BEGIN_SRC lns
// @lnsFront: skip
fn func(): (id:int, mess:str);
#+END_SRC

- シンボルが id で、型が int。
- シンボルが mess で、型が str。

ただ、上記はあくまでも人がその型が何なのか理解するのを補助するためのもので、
処理上は次のように省略したときと何も違いはありません。

#+BEGIN_SRC lns
// @lnsFront: skip
fn func(): (int,str);
#+END_SRC

* タプルの値の展開

タプル型に格納されている値を展開するには =...= 演算子を使用します。

#+BEGIN_SRC lns
  // @lnsFront: ok
  fn func(): (int,str) {
     return (= 1, "abc" );
  }

  let val1,val2 = func()...; // 1 "abc"
  print( val1 + 10, val2 .. "xyz" ); // 11 abcxyz
#+END_SRC

タプル型の値の後に =...= を指定することで、タプルが展開されます。

なお、次のような方法でタプルの各要素を参照することはできません。 

#+BEGIN_SRC lns
// @lnsFront: error
let val = (= 1, "abc" ); // 1 "abc"
print( val[1] ); // error
#+END_SRC

以上。
