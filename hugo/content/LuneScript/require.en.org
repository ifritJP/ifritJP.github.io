#+TITLE: 22. require / module edition
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

This time, I will explain how to handle Lua modules from LuneScript.


* require

Use =require()= when working with Lua modules.

The specification of =require()= is the same as Lua, but the return value is stem. That is, it has no type information. Casting is required as appropriate.


* module

As mentioned above, = require () = returns stem.

Since stem has no type information, it is not easy to use.

So we use the module declaration.

For example, if you have the following Lua module Test.lua:
#+BEGIN_SRC lua
local mod = {}
mod.val = 1;
function mod.func1( val )
   return val + 10
end
function mod:func2( val )
   return self.val + val
end
return mod
#+END_SRC


This Test.lua module has the following elements:
- int member val
- Function func1
- Method func2
*The function mentioned here is called with. Like obj.func1 (), and the method is called with: like obj: func1 () when called.*

The module declaration that utilizes this Test.lua module is as follows.
#+BEGIN_SRC lns
// @lnsFront: skip
module Test require 'Test'
{
   pub static let val:int;
   pub static fn func1( val:int ):int;
   pub fn func2( val:int ):int;
}
print( Test.val, Test.func1( 10 ), Test.func2( 20 ) ); // 1 20 21
#+END_SRC


First, module Test of module Test require'Test'declares the module name Test. Think of the module name as a regular class name. I used the same module name as Lua here, but it doesn't matter if it has a different name.

module Test require'Test' require'Test' specifies which module to load. Here we specify that the Test module is loaded.

The rest is the same as a regular class declaration.

The module declared as module is accessed by the module name.
#+BEGIN_SRC lns
// @lnsFront: skip
print( Test.val, Test.func1( 10 ), Test.func2( 20 ) );
#+END_SRC



** LuneScript is not builtin lua API

LuneScript has built-in the minimum required Lua standard API for self-hosting.

You cannot directly access Lua's standard APIs that are not built-in (for example, =math.pi=).

To access APIs that are not built-in, you can make them available by declaring a module as follows:
#+BEGIN_SRC lns
// @lnsFront: ok
module Math require 'math' {
   pub static let pi:real;
   pub static fn sin(x:real):real;
}

print( Math.pi, Math.sin(Math.pi/2) );  // 3.1415926535898	1.0
#+END_SRC



** Module declaration restrictions

The module declaration has the following restrictions:
- Modules cannot be inherited to declare new classes
- Do not check the consistency between the required Lua module and the declared module
  - Behavior in case of inconsistency is undefined


* summary
- LuneScript can handle Lua modules.
- There are =require()= and module declarations for working with Lua modules.
- There are restrictions on the module declaration.

Next time, I'll talk about macros.
