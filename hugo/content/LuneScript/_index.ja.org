#+TITLE: トランスコンパイラ LuneScript で Lua の開発をもっと楽に!!
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+date: 2020/1/1
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

*TypeScriptからLuaに変換する TypeScriptToLua があります。* 

<https://typescripttolua.github.io/>


*LuneScript の今後については以下を参照してください。*

<https://ifritjp.github.io/blog2/public/posts/2021/2021-05-26-lunescript-plan/>

-------

Lua は非常にコンパクトな言語でありながら、高い潜在能力を持つ言語です。

プログラムに組み込まれる言語としては、
最も使い易い言語の一つと言っても良いと思います。

ただ「プログラムに組み込まれる言語としては使い易い」とはいえ、
イマドキの言語と比べると、いろいろと気になるところがあるのも事実です。

一方で、Lua をイマドキの言語に近づけるための機能進化は、
「コンパクト」という Lua の大きな特徴の一つとトレードオフになる可能性があります。

そこで、 Lua 自体には手を加えずに、
Lua の気になる箇所をカバー出来るトランスコンパイラ LuneScript を紹介します。

* LuneScript とは

LuneScript とは、前述の通り Lua の気になる点をカバーする言語で、
LuneScript で開発したコードを Lua のコードに変換することが可能な
トランスコンパイラです。

LuneScript は、次の特徴を持ちます。

- NULL 安全 (null safety)。
- 静的型付け言語であるため、型チェックにより単純なミスをコンパイル時に発見可能。
- 型推論により、型宣言の手間を最小化。
- generics により、型情報を保ったままの処理が可能。
- 言語の文法としてクラス定義を対応。
- パターンマッチ対応。 (match)
- 遅延ロードによるロード時間短縮。
- 構造化データと非構造化データとの相互変換。 (Mapping)
- マクロ により、ポリモーフィズム等の動的処理に頼らないデザインを実現可能。
- 変数の初期化漏れを検知
- Lua と go へのトランスコンパイル。
- JSON と互換なデータ表現をサポート。
- トランスコンパイルした Lua コードは、外部ライブラリを前提とせずに単体で動作可能。
- トランスコンパイルした Lua コードは、LuneScript で書いた処理そのままが出力されるので、
  性能劣化がない。
- 既存の Lua の外部モジュールを LuneScript から利用可能。
- LuneScript は Lua 上で動作し、Lua 標準モジュール以外を必要としないため、導入が簡単。
  - go 版 LuneScript を利用すると、トランスコンパイル時間を 1/20 に短縮可能。
- LuneScript から変換した Lua モジュールを、 他の Lua モジュールから利用可能。
- Lua5.1 〜 5.4 をサポート。
  - Lua5.1 については次を参照してください。
  - [[./crosscompile]]
- LuneScript はセルフホスティングで開発している。
- emacs でのコード補完に対応
- lnstags によるタグジャンプに対応
  - [[./lnstags]]
- glue コードの自動生成に対応
- Lua と C の syntax を基調としているため、学習コストが低い。

* LuneScript の使用方法

LuneScript は github で開発しています。
  
<https://github.com/ifritJP/LuneScript>

導入方法は次を参照してください。

- 導入編
  - [[./tutorial2.setup]]

** コマンド

LuneScript を導入すると、lnsc コマンドがインストールされます。


lnsc コマンドの使用方法については、次の記事を参考にしてください。

- Hello world
  - [[./tutorial3.hello]]
    
** Lua バージョン間のクロスコンパイル

LuneScript は Lua のバージョン間クロスコンパイルをサポートします。
次の記事を参考にしてください。

- Lua バージョン間のクロスコンパイル
  - [[./crosscompile]]

* LuneScript の仕様

ここでは LuneScript の仕様について説明します。

** 値と型

LuneScript で扱う値と型については次の記事を参考にしてください。

- 値編
  - [[value]]
- enum 編
  - [[enum]]

** コメント

コメントは C++ スタイルを採用。
一行コメント ~//~ 、 複数行コメント ~/* */~ を指定可能。

#+BEGIN_SRC lns
// @lnsFront: skip
// 行末までコメント
/* ここから〜
ここまでコメント*/
#+END_SRC

** 演算子

原則的に、演算子 は Lua と同じものを利用する。

Lua5.3 の //(切り捨て除算) は、LuneScript では 1 行コメントとなるので注意すること。

なお LuneScript では、 int 同士の / は自動的に切り捨て除算となる。

** 変数宣言

LuneScript の変数については次の記事を参考にしてください。

- 変数 編
  - [[variable]]

   
** 一般制御文

LuneScript の制御文については次を参考にしてください。

- 一般分岐
  - [[branch]]
- 繰り返し構文 編
  - [[loop]]


** 関数宣言

LuneScript の関数については、次を参考にしてください。

- 関数 編
  - [[func]]

** nilable

LuneScript は nil 安全 (NULL 安全) な言語です。

LuneScript の nil 安全を実現する nilable については、
次を参考にしてください。

- nilable 編
  - [[nilable]]


** クラス
   
LuneScript はオブジェクト指向プログラミングのためのクラスをサポートします。

LuneScript のクラスは、次の制約を持ちます。

- 多重継承はサポートしない。
- +generics はサポートしない。+
- 全てがオーバーライド可能なメソッドとなる。
  - オーバーライドの抑制はできない。
- 継承間で引数の異なる同名メソッドは定義できない。
  - ただし、コンストラクタは例外で同じ名前( __init )。


次の記事を参考にしてください。

- クラス 基本 編
  - [[class1]]
- accessor 編
  - [[class2accessor]]
- クラス 継承 編
  - [[classinherit]]
- クラス advertise 編
  - [[classadvertise]]
- クラス override 編
  - [[classoverride]]
- インタフェース 編
  - [[interface]]


*** プロトタイプ宣言

LuneScript は、スクリプトの上から順に解析する。

スクリプトで参照するシンボルは、事前に定義されている必要がある。
例えばクラス TEST 型の変数を宣言するには、事前にクラス TEST を定義する必要がある。

また、相互に参照するクラスを定義するには、
どちらかをプロトタイプ宣言する必要がある。

次は、 ClassA, ClassB がそれぞれを相互参照する時の例である。

#+BEGIN_SRC lns
// @lnsFront: ok
pub class Super {
}
pub proto class ClassB extend Super;
pub class ClassA {
  let val: ClassB;
}
pub class ClassB extend Super{
  let val: ClassA;
}
#+END_SRC

proto は上記のように宣言する。

プロトタイプ宣言と実際の定義において、
pub や extend など同じものを宣言しなければならない。


** Mapping

LuneScript のクラスインスタンスは、
Map オブジェクトとの相互変換が可能である。

これを Mapping と呼ぶ。

Mapping については次を参考にしてください。

- mapping 編
  - [[classmapping]]


** Generics

LuneScript は Generics をサポートします。

詳しくは次を参照してください。

- generics 編
  - [[generics]]

** nil 条件演算子

nilable の値を簡単に扱う方法として、 nil 条件演算子をサポートしています。

- nil 条件演算子 編
  - [[nilcond]]   


** モジュール

LuneScript のモジュール管理については、次を参考にしてください。
   
- import/provide 編  
  - [[import]]
- require/module 編    
  - [[require]]
  
* ビルド

LuneScript を使用したプロジェクトをビルドする方法については、次を参考にしてください。

- ビルド 編
  - [[make]]  

** _lune.lua モジュール

前述している通り LuneScript で Lua へトランスコンパイルしたファイルは、
Lua コマンドでそのまま実行できます。
この時、外部モジュールを必要としません。

これは、トランスコンパイルした Lua コード内に、
処理に必要なコードを全て含めていることを示します。

例えば次の処理コードをトランスコンパイルすると、

#+BEGIN_SRC lns
// @lnsFront: ok
fn func( val:int! ):int {
   return 1 + unwrap val default 0;
}
#+END_SRC


Lua コードは次のようにだいぶ長くなります。

#+BEGIN_SRC lua -n
--mini.lns
local _moduleObj = {}
local __mod__ = 'mini'
if not _ENV._lune then
   _lune = {}
end
function _lune.unwrap( val )
   if val == nil then
      __luneScript:error( 'unwrap val is nil' )
   end
   return val
end 
function _lune.unwrapDefault( val, defval )
   if val == nil then
      return defval
   end
   return val
end

local function func( val )
   return 1 + _lune.unwrapDefault( val, 0)
end

return _moduleObj
#+END_SRC

この 4 〜 18 行目が unwrap に必要な処理となります。
なお、このコードは全ての Lua ファイルに出力されます。

このコード自体は共通処理であるため、
トランスコンパイルする際に *-r* オプションを指定することで、
別モジュールとして require して共通処理をまとめることができます。

具体的には次のように -r オプションを指定します。

#+BEGIN_SRC txt
$ lua lune/base/base.lua -r src.lns save
#+END_SRC

この -r オプションを指定した場合、上記のコードは次のように変換され、
かなりスッキリします。

#+BEGIN_SRC lua
--mini.lns
local _moduleObj = {}
local __mod__ = 'mini'
_lune = require( "lune.base._lune" )
local function func( val )
   return 1 + _lune.unwrapDefault( val, 0)
end

return _moduleObj
#+END_SRC

なお、require( "lune.base._lune" ) が挿入されるため、
このモジュールがロード出来るようにセットしておく必要があります。
トランスコンパイラが動作する環境であれば意識する必要はありませんが、
変換後の Lua ソースをどこか別の環境で実行するような場合は注意が必要です。


** マクロ

LuneScript は簡易的なマクロを採用する。

*** マクロの意義

マクロは通常の関数と比べて幾つかの制限がある。
またマクロで行なえる処理は、オブジェクト指向を駆使することで実現できることが多い。

では、マクロを使う意義は何か？

それは、「マクロを使うことで静的に動作が確定する」ことである。

同じ処理をオブジェクト指向で実現した場合、動的な処理となってしまう。
一方、マクロで実現すれば、静的な処理となる。

これの何が嬉しいのか？

それは、静的型付け言語が動的型付け言語よりも優れている点と同じである。

静的に決まる情報を静的に処理することで、静的に解析できる。

例えば、オブジェクト指向の関数オーバーライドの大部分は、
マクロを利用することで静的に解決することができる。
動的な関数オーバーライドではなく、静的な関数呼び出しにすることで、
ソースコードを追い易くなる。

無闇にマクロを多用するは良くないが、
安易に関数オーバーライドなどの動的処理にするのも理想ではない。

動的処理とマクロは適宜使い分けが必要である。

*** マクロ定義

マクロ定義については次の記事を参考にしてください。

- マクロ 編
  - [[macro]]


** 補足
   
補足記事は、ここにリンクを追加していきます。

- Lua のトランスコンパイラ LuneScript の紹介 2 
  - subfile, module, nil 条件演算子 の紹介
  - [[introduce2]]
- Lua のトランスコンパイラ LuneScript のイマドキな開発環境でもっと楽しよう
  - 補完、syntax チェック、subfile の検索
  - [[completion]]


このページからリンクしていない記事は、サイドバーから辿ってください。
