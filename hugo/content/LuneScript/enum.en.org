#+TITLE: 05. enum edition
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

This time, I will explain the enum value of LuneScript.


* enum

LuneScript enums allow you to name and manage sets of values.

The types of values that can be handled as enums are as follows.
- int
- real
- str  
The range of an enum can be defined from multiple values, but the value types must be the same.

That is, an enum with an int value cannot define a real or str value.


** Definition method

The enum is defined as follows:
#+BEGIN_SRC lns
// @lnsFront: ok
enum TestEnum {
  val0,
  val1,
  val2,
}
print( TestEnum.val0, TestEnum.val1, TestEnum.val2 );  // 0, 1, 2
#+END_SRC


In this example, we define val0, val1, val2, which are 0, 1, 2, respectively.

If you want to specify a value for an enum, define it as follows:
#+BEGIN_SRC lns
// @lnsFront: ok
enum TestEnum {
  val0 = 10,
  val1,
  val2 = 20,
}
print( TestEnum.val0, TestEnum.val1, TestEnum.val2 ); // 10, 11, 20
#+END_SRC


If you omit the enum value, assign the value as follows:
- Assign the value obtained by adding 1 to the previous enum value.
- The first enum value is 0
When assigning a character string to the enum value, the value cannot be omitted.
#+BEGIN_SRC lns
// @lnsFront: ok
enum TestEnum {
  val0 = "abc",
  val1 = "def",
  val2 = "ghi",
}
print( TestEnum.val0, TestEnum.val1, TestEnum.val2 ); // abc def ghi
#+END_SRC


An expression can be specified for the value to be set in the enum value. However, this expression should only use immediate values.

For example, in the following cases
#+BEGIN_SRC lns
// @lnsFront: error
fn func(): int {
  return 100;
}
enum TestEnum {
  val0,
  val1 = val0 + 10,  // 10
  val2 = func(),     // error
}
#+END_SRC


~val = val0 + 10~ can be specified because it uses an immediate value, but ~val2 = func()~ is not an immediate value, so an error will occur.


** how to use

The defined enum can be used as a type as follows:
#+BEGIN_SRC lns
// @lnsFront: ok
enum TestEnum {
  val0,
  val1,
  val2,
}
fn func( val:TestEnum ): int {
   return val + 100;
}
print( func( TestEnum.val1 ) ); // 101
#+END_SRC


Where the argument val of =func()= is of type TestEnum. This allows the =func()= argument val to be a range-limited int rather than just an int.

If you specify an enum value, it will be ~enum type symbol.enum value symbol~, such as ~TestEnum.val~.


** Omitted

Basically, to specify an enum value, use ~enum type symbol.enum value symbol~, but if you know that the type to which you want to assign is an enum type, you can omit ~enum type symbol~.

For example, in the following case, we know that the argument of =func()= is of type TestEnum, so we can specify it as .val1 instead of TestEnum.val1.
#+BEGIN_SRC lns
// @lnsFront: ok
enum TestEnum {
  val0,
  val1,
  val2,
}
fn func( val:TestEnum ): int {
   return val + 100;
}
print( func( .val1 ) ); // 101
#+END_SRC


If you omit the enum type defined in the external module, you need to import the external module.

I will explain about import at a later date.


** Enum value conversion

The enum value can be used as a defined value as well as as an enum value.

You can see this by looking at val + 100 in the example above, where val is the enum value defined in TestEnum, which can be either 0, 1, or 2. (In the above example, val1 is passed, so it becomes 1). So ~val + 100~ is 1 + 100, resulting in 101.

On the other hand, look at the following example.
#+BEGIN_SRC lns
// @lnsFront: error
enum TestEnum {
  val0,
  val1,
  val2,
}
fn func( val:TestEnum ): int {
   return val + 100;
}
let val = 1;
func( val ); // error
#+END_SRC


~func( val )~ in this example will result in an error.

In this case, val is 1 and val1 is 1 in TestEnum, but an error occurs because the type of val is int and the type is different from TestEnum.

To convert a value of type assigned to an enum value to the corresponding enum value, use the =_from()= function as follows:
#+BEGIN_SRC lns
// @lnsFront: ok
enum TestEnum {
  val0,
  val1,
  val2,
}
fn func( val:TestEnum ): int {
   return val + 100;
}
let val = 1;
func( unwrap TestEnum._from( val ) );
#+END_SRC


Here ~func( unwrap TestEnum._from( val ) )~ gets the enum value TestEnum.val1 of TestEnum corresponding to val by =TestEnum._from()= and passes it to =func()=.

I'll talk about unwrap later.


** enum value name

The enum value assigns a value to the symbol.

The enum value can get this symbol name dynamically by $ _txt.

For example, TestEnum.val1 is output in the following cases.
#+BEGIN_SRC lns
// @lnsFront: ok
enum TestEnum {
  val0,
  val1,
  val2,
}
fn func( val:TestEnum ) {
   print( val.$_txt ); 
}
func( .val1 ); // TestEnum.val1
#+END_SRC


$ _txt gets the symbol name of the enum value.

We'll talk about $ later, but it's syntactic sugar for function calls.


*** Note on $ _txt

There are the following caveats to $ _txt:

*"If there are multiple enum values with the same value, it is undefined which enum value symbol name $ _txt returns."*

For example, in the following cases, it is undefined whether = print () = prints TestEnum.val1 or TestEnum.val2.
#+BEGIN_SRC lns
// @lnsFront: ok
enum TestEnum {
  val0,
  val1 = 10,
  val2 = 10,
}
fn func( val:TestEnum ) {
   print( val.$_txt ); 
}
func( .val1 ); // TestEnum.???
#+END_SRC


*Also, the string format obtained by $ _txt may change in the future. Do not write code that switches processing depending on the result of _txt.*


** List of all enum values

You can get a list of all enums defined by enums with $ _allList.

For example, in the following code
#+BEGIN_SRC lns
// @lnsFront: ok
enum TestEnum {
  val0,
  val1,
  val2,
}
foreach val in TestEnum.$_allList {
   print( val.$_txt );
}
#+END_SRC


Outputs the following:
#+BEGIN_SRC txt
TestEnum.val0
TestEnum.val1
TestEnum.val2
#+END_SRC



* Algebraic data type

For enum types, you can group one type of int, real, or str to limit the range, but you cannot group multiple types. Algebraic data types are a more general version of enum types, and all types can be grouped, not just int, real, and str.

Details are explained in the next article.

[[../match]]


* summary

By using enums, you can easily define the range and provide an exciting way to handle enums easily.

Next time, I'll talk about variables.
