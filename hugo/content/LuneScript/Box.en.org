#+TITLE: Box edition
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

*This is information under consideration. Currently not available.*


* Nilable type

As mentioned earlier, you cannot specify nilable as a generics real-type parameter.

Due to this limitation, the following ~new Test( val )~ will result in an error.
#+BEGIN_SRC lns
// @lnsFront: skip
class Test<T> {
   let val:T;
}
let val:int! = 1;
let test = new Test( val ); // error
#+END_SRC


There are two patterns to avoid this error.
- Use T!
- Use Nilable type
In the case of "using T!", The above process can be written as follows.
#+BEGIN_SRC lns
// @lnsFront: skip
class Test<T> {
   let val:T!; // <--- T! とする
}
let val:int! = 1;
let test = new Test( val );
#+END_SRC


However, this is cumbersome because in many cases you have to declare it as nilable even if it is non-nilable and good, which requires unwrapping.

Therefore, we will use the Nilable type.


** What is Nilable type?

The Nilable type is a type that wraps the value of nilable. Think of it as an Integer class for int in Java.
