#+TITLE: 20. nil conditional operator edition
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

This time, I will explain the nil conditional operator of LuneScript.


* Map access

For example, if you have the following Map data,
#+BEGIN_SRC lns
// @lnsFront: ok
let json = {
   "lv1": {
      "lv2": {
         "lv3": {
            "lv4": { 
               "lv5": {
                  "val": 1
               }           
            }        
         }     
      }  
   }
};
#+END_SRC


To access the val of lv5, you need to do the following:
#+BEGIN_SRC lns
// @lnsFront: skip
if! let lv1 = json.lv1 {
   if! let lv2 = lv1.lv2 {
      if! let lv3 = lv2.lv3 {
         if! let lv4 = lv3.lv4 {
            if! let lv5 = lv4.lv5 {
               print( lv5.val );
            }        
         }     
      }  
   }  
}
#+END_SRC


Or you need to unwrap it like this:
#+BEGIN_SRC lns
// @lnsFront: skip
print( (unwrap (unwrap (unwrap (unwrap (unwrap json.lv1).lv2).lv3).lv4).lv5).val );
#+END_SRC


Either way, it's not good.

The nil conditional operator can be used to easily perform such nested nil checks.


* nil conditional operator

Accessing the val of lv5 above using the nil conditional operator gives:
#+BEGIN_SRC lns
// @lnsFront: skip
print( json.lv1$.lv2$.lv3$.lv4$.lv5$.val );
#+END_SRC


It's pretty refreshing.

The nil conditional operator, specified immediately after an expression in nilable, controls whether the expression in nilable is nil and whether subsequent expressions are executed.

If the evaluation result of an expression of nilable is not nil, the subsequent expression is executed, and if the evaluation result of the expression of nilable is nil, the result of the expression is nil without executing the subsequent expression.

Note that ~$[~ is used to access the list, and ~$(~ is used to call the function.

Here is an example:
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
   pub let val:List<int>;
   pub fn func():int {
      return 100;
   }
}
fn sub( test:Test! ) {
   print( test$.val$[1], test$.func$() );
}
sub( new Test( [ 1, 2 ] ) ); // 1 100
sub( nil ); // nil nil
#+END_SRC


In the above example, the val list of the Test class and func are accessed using the nil conditional operator in the =sub()= function. This allows you to access without unwrapping.


* caution

Whenever you use nil conditional access, the evaluation result is nilable.

Here is an example:
#+BEGIN_SRC lns
// @lnsFront: ok
class Test {
   pub let val:int;
}
fn sub( test:Test! ) {
   if! test$.val {
      print( _exp + 1 );
   }
}
sub( new Test( 10 ) ); // 11
#+END_SRC


In the above case, the val of the Test class is an int.

In the sub function in the above example, an instance of the Test class of type nilable is accessed by ~test$.val~. At this time, the evaluation result of ~test$.val~ is int! Instead of int.


* summary

Nil conditional access makes it easy to unwrap deep nests.

Next time, I'll talk about module management.
