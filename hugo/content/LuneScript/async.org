#+TITLE: @.2 非同期処理
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

LuneScript から go 言語へのトランスコンパイル対応したのを機に、
LuneScript による非同期処理を対応しました。

ただし、これは非常に実験的な内容なので参考程度にしてください。

* __Runner インタフェース

LuneScript で非同期処理を行なうには、 __Runner インタフェースを実装します。

__Runner インタフェースは、以下の型です。

#+BEGIN_SRC lns
pub interface __Runner {
   pub fn run() __async mut;
}
#+END_SRC

このインタフェースを実装すると、
新しい組込み関数の __run(), __join を利用できます。

例えば、以下のような処理を実行すると、
=print("hoge:", self.val );= が非同期で処理されます。

#+BEGIN_SRC lns
class Hoge extend (__Runner) {
   let val:int;
   pub fn run() __async mut {
      print("hoge:", self.val );
   }
}

let list:List<Hoge> = [];
for index = 0, 10 {
   let mut hoge = new Hoge(index);
   hoge.run();
   list.insert( hoge );
}
foreach hoge in list {
   __join( hoge );
}
#+END_SRC

上記は意味のない処理ですが、
