#+TITLE: 14. Class inheritance
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

LuneScript supports class inheritance.


* Class inheritance

The following is an example of class inheritance.
#+BEGIN_SRC lns
// @lnsFront: ok
class Super {
   pub fn func() {
      print( __func__ );
   }
}
class Sub extend Super {
}
let sub = new Sub();
sub.func(); // Super.func
#+END_SRC


This is an example where the Sub class inherits from the Super class.

Inheritance uses extend when declaring a class to specify the parent class to inherit.

Only one class can be inherited.

If the access control of the constructor is pri, that class cannot be inherited.


** Subclass constructor

If the parent class's constructor has arguments, the subclass must declare the constructor.

For example, in the following example, the Super class does not explicitly declare a constructor, but it internally generates a default constructor with arguments that initialize member val.
#+BEGIN_SRC lns
// @lnsFront: ok
class Super {
   pro let val:int;
}
class Sub extend Super {
   pub fn __init( val:int ){
      super( val );
   }
   pub fn func() {
      print( self.val );
   }
}
let sub = new Sub( 1 );
sub.func(); // 1
#+END_SRC


At this time, the Sub class that inherits Super has a constructor whose parent class has arguments, so it is necessary to declare the constructor of the Sub class. We also call =super()= to execute the constructor of the parent class Super in the constructor of the Sub class. This =super()= should be written on the first line.


* summary

LuneScript supports class inheritance with the following specifications:
- Only one class can be inherited
- The subclass must call the constructor of the parent class.
- Call the constructor of the parent class with =super()=.
- =super()= needs each on the first line of the constructor.

Next time, I'll talk about method overrides.
