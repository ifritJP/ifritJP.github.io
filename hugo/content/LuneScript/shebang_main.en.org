#+TITLE: 28. shebang and command line arguments
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />

LuneScript supports shebang.


* Shebang compatible

Shebang is a function that executes the specified interpreter when the script file is executed by specifying the interpreter to be used in the comment on the first line of the script file that is often seen in shell scripts. For example, in bash, specify as follows.
#+BEGIN_SRC sh
#! /bin/bash
#+END_SRC


In LuneScript, specify:
#+BEGIN_SRC sh
#! /usr/bin/lnsc -shebang
#+END_SRC


Here, =/usr/bin/lnsc= needs to be specified according to the environment.

This allows the LuneScript file containing =#!= to be executed as is.

For example, if you have the following file hello.lns,
#+BEGIN_SRC sh
#! /usr/bin/lnsc -shebang
print( "hello world" );
#+END_SRC


You can run this hello.lns directly.
#+BEGIN_SRC txt
$ hello.lns
hello world
#+END_SRC


+At this time, there are the following restrictions.+
- +In the go version of lnsc, the .lua that corresponds to the .lns file you are importing++Must be generated in advance.+


* Command line arguments

There are cases where you want to handle command line arguments, such as when launched by shebang or transcompiled to go.

To handle this command line argument, define the following __main function to handle the command line arguments passed to this function's arguments.
#+BEGIN_SRC lns
// @lnsFront: skip   
pub fn __main( argList:&List<str> ):int
#+END_SRC


The type of the __main function must be declared with the above type except for the argument name argList.


** Execution order of __main

The execution order of this __main function is performed after the top scope processing is completed. That is, for the following script
#+BEGIN_SRC lns
#! /usr/bin/lnsc -shebang
// @lnsFront: skip   
print( "hello world" );

pub fn __main( argList:&List<str> ):int {
   print( "hoge" );
   return 0;
}
#+END_SRC


The output result is as follows.
#+BEGIN_SRC txt
$ ./mini.lns 
hello world
hoge
#+END_SRC



** __main argument

The argument for =__main= is =&List<str>=.

This list contains the script path first, followed by command line arguments.
#+BEGIN_SRC lns
#! /usr/bin/lnsc -shebang
// @lnsFront: skip   
pub fn __main( argList:&List<str> ):int {
   foreach arg in argList {
      print( arg );
   }
   return 0;
}
#+END_SRC



* Behavior of __main () function when transcompiled to lua

The following LuneScript code outputs command line options.
#+BEGIN_SRC lns
pub fn __main( argList:&List<str> ) : int {
   foreach arg, index in argList {
      print( index, arg );
   }
   return 0;
}
#+END_SRC


The following is a sample execution result.
#+BEGIN_SRC txt
$ lnsc -shebang mini.lns a b c 
1	mini.lns
2	a
3	b
4	c
#+END_SRC


To transcompile this code, run the following command:
: lnsc mini.lns save


This will output a mini.lua.

When I run this mini.lua, it looks like this:
#+BEGIN_SRC txt
$ lua5.3 mini.lua a b c
#+END_SRC


*What this means is that the __main () function has not been called.*

If you run lnsc with the -shebang option, it runs the __main () function defined in the .lns file. On the other hand, the transcompiled lua code does not output the code that executes __main (), so this is the behavior.

To run __main () in transcompiled lua code, you need one of the following:
- Create your own code to execute __main ()
- Specify =--main= option when transcompiling


** =--main= option

By specifying the =--main= option when transcompiling, the process to execute the =__main()= function is output to the specified module.

The following is a sample of the =--main= options.
: $ lnsc mini.lns save --main mini


Where =--main mini='s mini is the module name that contains __main () to run.

This will output code to execute __main () in mini.lua.

The following is the execution result of mini.lua generated by specifying =--main mini=.
#+BEGIN_SRC txt
$ lua5.3 mini.lua a b c
1	mini.lua
2	a
3	b
4	c
#+END_SRC


*It should be noted here that the first argument of argList when executed with shebang of lnsc contains the path of .lns, while the first argument of argList after transcompiling to lua is the path of .lua. There is a difference that is included.*
