#+TITLE: 10.4. Variadic argument, return value
# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode-document.css" />


* Variadic argument, return value

You can define variadic and variadic functions by using ... for arguments and return values.

The following is a sample using ....
#+BEGIN_SRC lns
// @lnsFront: ok
fn func( ... ) : int, ... {
   let argList = [ ... ];
   let mut total = 0;
   foreach arg in argList {
      when! arg {
         total = total + arg@@int;
      }
   }
   return total, ...;
}

print( func( 1, 2, 3, 4 ) ); // 10 1 2 3 4 
#+END_SRC


In the above example, we define and execute a function func () that sums the values of the given variadic arguments and returns the sum and the given variadic arguments.

Use ... in the function body to indicate the variadic argument itself. Where ... is a value of zero or more stem !. stem! will be described later.

Callers of functions with variadic arguments can specify zero or more arguments of any type.


* Generics

You can declare variadic arguments and return values by using ... as described above.

However, since all the values of ... are treated as stem !, the type information is lost.

In the sample above, I'm passing int data to func (), but I still need unwrap and cast to access the value inside func () because the type information is lost.

To preserve the type information, use ~...<type>~ as follows:
#+BEGIN_SRC lns
// @lnsFront: ok
fn func( ...<int> ) : int, ...<int> {
   let argList = [ ... ];
   let mut total = 0;
   foreach arg in argList {
      total = total + arg;
   }
   return total, ...;
}
print( func( 1, 2, 3, 4 ) ); // 10 1 2 3 4 
#+END_SRC


By using ~...<int>~, it is possible to handle variable-length arguments and return values while retaining the int type information.

Note that func1 () and func2 () in the following sample are synonymous.
#+BEGIN_SRC lns
// @lnsFront: ok
fn func1( ...<stem!> ) {
   print( ... );
}
fn func2( ... ) {
   print( ... );
}
func1( 1, "abc" );
func2( 1, "abc" );
#+END_SRC

