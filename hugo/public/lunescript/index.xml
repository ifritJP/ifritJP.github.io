<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>トランスコンパイラ LuneScript で Lua の開発をもっと楽に!! on 公開技術情報</title>
    <link>https://ifritjp.github.io/documents/lunescript/</link>
    <description>Recent content in トランスコンパイラ LuneScript で Lua の開発をもっと楽に!! on 公開技術情報</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    
	<atom:link href="https://ifritjp.github.io/documents/lunescript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>00. はじめに</title>
      <link>https://ifritjp.github.io/documents/lunescript/tutorial1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/tutorial1/</guid>
      <description>皆さんは LuneScript をご存知ですか？ 知りませんよね？ それが普通です。 LuneScript は超マイナー言語の一つです。 この記事は、そんなマイナー言語の導入ハードルを 少しで</description>
    </item>
    
    <item>
      <title>01. 導入編</title>
      <link>https://ifritjp.github.io/documents/lunescript/tutorial2.setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/tutorial2.setup/</guid>
      <description>今回は、 LuneScript の導入方法についての紹介です。 LuneScript の導入方法 LuneScript は Lua のトランスコンパイラです。 また、LuneScript 自体も Lua のスクリプトとして動作</description>
    </item>
    
    <item>
      <title>02. Hello world</title>
      <link>https://ifritjp.github.io/documents/lunescript/tutorial3.hello/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/tutorial3.hello/</guid>
      <description>今回は、 LuneScript を使った Hello world の紹介です。 lnsc コマンド LuneScript を導入すると、lnsc コマンドがインストールされます。 lnsc コマンドは次のように利用します。 $ lnsc src.lns</description>
    </item>
    
    <item>
      <title>03. Lua バージョン間のクロスコンパイル</title>
      <link>https://ifritjp.github.io/documents/lunescript/crosscompile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/crosscompile/</guid>
      <description>今回は少し予定を変更して、LuneScript のクロスコンパイルについて説明します。 クロスコンパイル ここでいう「クロスコンパイル」とは、 Lua の</description>
    </item>
    
    <item>
      <title>04. 値編</title>
      <link>https://ifritjp.github.io/documents/lunescript/value/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/value/</guid>
      <description>今回は、 LuneScript で扱える値について説明します。 値の型 LuneScript で扱える値の型と、トランスコンパイラ後の Lua の値との対応表を示します。 LuneScript Lua 用途 LuneScript での定義方法 nil,</description>
    </item>
    
    <item>
      <title>04.2. Set 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/set/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/set/</guid>
      <description>ここでは LuneScript の値の集合 Set の扱いについて説明します。 Set と Map の違い Set は値の集合を管理し、 Map は値と値の紐付けを管理します。 どちらも Lua に変換した場合、</description>
    </item>
    
    <item>
      <title>05. enum 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/enum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/enum/</guid>
      <description>今回は、 LuneScript の enum 値について説明します。 enum LuneScript の enum は、値の集合に名前を付けて管理することが出来ます。 enum として扱える値の型は次の通りです。 int real str 1 つ</description>
    </item>
    
    <item>
      <title>06. match 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/match/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/match/</guid>
      <description>LuneScript は、代数的データ型とパターンマッチをサポートします。 代数的データ型 (alge型) enum 型は、 int, real, str のいずれかの値をグルーピングして、値域を制限</description>
    </item>
    
    <item>
      <title>07. 変数 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/variable/</guid>
      <description>今回は LuneScript の変数について説明します。 変数 LuneScript は静的型付け言語であり、変数は型を持ちます。 変数は、次のように let で宣言します。 let val:int = 1; 上記の例は、初</description>
    </item>
    
    <item>
      <title>08. 一般分岐構文 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/branch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/branch/</guid>
      <description>今回は LuneScript の一般分岐構文について説明します。 構文一覧 LuneScript は、次の一般分岐構文をサポートします。 if switch ちなみに、ここであえて「一般」分岐制御としてい</description>
    </item>
    
    <item>
      <title>09. 繰り返し構文 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/loop/</guid>
      <description>今回は LuneScript の繰り返し構文について説明します。 構文一覧 LuneScript は、次の繰り返し構文をサポートします。 while repeat for apply foreach forsort while, repeat while, repeat は次のように利用します。 let mut val</description>
    </item>
    
    <item>
      <title>10. 関数 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/func/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/func/</guid>
      <description>今回は、 LuneScript の関数について説明します。 関数定義 LuneScript の関数は次のように定義します。 fn add_sub( val1:int, val2:int ): int, int { return val1 + val2, val1 - val2; } print( add_sub( 1, 2 ) ); // 3, -1 上記の例は、次</description>
    </item>
    
    <item>
      <title>10.2. 多値の戻り値</title>
      <link>https://ifritjp.github.io/documents/lunescript/multipleretval/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/multipleretval/</guid>
      <description>LuneScript は、多値の関数戻り値に対応しています。 例えば、次のように関数は複数の値を返せます。 fn func(): int,int { return 1, 2; } print( func() ); // 1 2 上記サンプルでは、 func() は 1 と 2</description>
    </item>
    
    <item>
      <title>10.3. 引数の省略 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/defaultarg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/defaultarg/</guid>
      <description>LuneScript は、nilable 型の引数は関数コール時に省略することが出来ます。 例えば次の関数 func() は、引数を省略してコールできます。 fn func( val1:int!, val2:int! ):int { when! val1, val2 { return</description>
    </item>
    
    <item>
      <title>10.4. 可変長引数、戻り値 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/arg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/arg/</guid>
      <description>可変長引数、戻り値 引数、 戻り値に … を利用することで、 可変長引数、可変長戻り値の関数を定義できます。 … を利用したサンプルを次に示します。 fn func( ...</description>
    </item>
    
    <item>
      <title>11. nilable 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/nilable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/nilable/</guid>
      <description>今回は LuneScript の nilable について説明します。 nilable とは LuneScript は、値に nil を持ちます。 以前説明しましたが、 stem 型の変数は nil 以外の全ての型を保持できます。 let mut val:stem = 1; val =</description>
    </item>
    
    <item>
      <title>12. クラス 基本 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/class1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/class1/</guid>
      <description>LuneScript は、クラスによるオブジェクト指向プログラミングをサポートします。 クラスの仕様 LuneScript のクラスは、次をサポートします。 アクセス制御 accessor 継承 abstract override advertise Mapping interface</description>
    </item>
    
    <item>
      <title>13. accessor 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/class2accessor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/class2accessor/</guid>
      <description>今回はメンバの accessor について説明します。 accessor メンバの accessor (get,set) を簡単に作成できます。 次に例を示します。 class Test { pri let val1:int; pri let mut val2:int {pub,pub}; pri let val3:int {pub}; } let mut test = new Test( 1, 2, 3</description>
    </item>
    
    <item>
      <title>14. クラス 継承 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/classinherit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/classinherit/</guid>
      <description>LuneScript は、クラスの継承をサポートします。 クラスの継承 次にクラスの継承例を示します。 class Super { pub fn func() { print( __func__ ); } } class Sub extend Super { } let sub = new Sub(); sub.func(); // Super.func これは、 Super</description>
    </item>
    
    <item>
      <title>15. クラス advertise 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/classadvertise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/classadvertise/</guid>
      <description>LuneScript は、クラスが保持するメンバのメソッドに対して、 透過的にアクセスさせることが出来ます。 advertise 「透過的にアクセス」という表現では伝わり難いと思うの</description>
    </item>
    
    <item>
      <title>16. クラス override 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/classoverride/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/classoverride/</guid>
      <description>LuneScript は、メソッドの override をサポートします。 メソッドの override クラスのメソッドは全て override 可能です。 むしろ、現在は override を抑制することができません。 メソッドの override の</description>
    </item>
    
    <item>
      <title>17. インタフェース 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/interface/</guid>
      <description>LuneScript は、クラスの多重継承をサポートしない代わりに、 インタフェースをサポートします。 インタフェース Java や C# を使用していればお馴染だと思いますが、 イ</description>
    </item>
    
    <item>
      <title>18. mapping 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/classmapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/classmapping/</guid>
      <description>LuneScript は、クラスのインスタンスとマップとの相互変換をサポートします。 mapping LuneScript は、クラスのインスタンスとマップオブジェクトとの相互変換をサポートします</description>
    </item>
    
    <item>
      <title>19. generics 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/generics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/generics/</guid>
      <description>ここでは、 LuneScript がサポートする Generics について説明します。 LuneScript では当初、組込み型の List/Array/Map でのみ Generics をサポートしていましたが、 ユーザ定義の関数やクラスでも Generics をサ</description>
    </item>
    
    <item>
      <title>20. nil 条件演算子 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/nilcond/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/nilcond/</guid>
      <description>今回は LuneScript の nil 条件演算子について説明します。 Map アクセス 例えば次のような Map のデータがあった場合、 let json = { &amp;#34;lv1&amp;#34;: { &amp;#34;lv2&amp;#34;: { &amp;#34;lv3&amp;#34;: { &amp;#34;lv4&amp;#34;: { &amp;#34;lv5&amp;#34;: { &amp;#34;val&amp;#34;: 1 } } } } } }; lv5 の</description>
    </item>
    
    <item>
      <title>21. import/provide 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/import/</guid>
      <description>今回は LuneScript のモジュール管理について説明します。 モジュール LuneScript のモジュール管理は、基本的に Lua と同じです。 Lua との違いを、次に挙げます。 特に宣言しない</description>
    </item>
    
    <item>
      <title>22. require/module 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/require/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/require/</guid>
      <description>今回は LuneScript から Lua モジュールを扱う方法について説明します。 require Lua モジュールを扱う場合、 require() を使用します。 require() の仕様は Lua と同じですが、戻り値は stem になりま</description>
    </item>
    
    <item>
      <title>22.1. glue コードの半自動生成</title>
      <link>https://ifritjp.github.io/documents/lunescript/glue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/glue/</guid>
      <description>Lua の外部モジュールには、次の 2 つのケースがある。 Lua スクリプトで構成されるケース C 等の Native Library を利用するケース Lua から Native Library を利用するには、 Lua 用のイン</description>
    </item>
    
    <item>
      <title>23. ビルド 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/make/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/make/</guid>
      <description>今回は LuneScript を使用したプロジェクトを、ビルドする方法について説明します。 LuneScript は、コマンドラインから利用するトランスコンパイラを提供しますが、 LuneScript 専用</description>
    </item>
    
    <item>
      <title>24. マクロ 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/macro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/macro/</guid>
      <description>今回は LuneScript のマクロについて説明します。 マクロ LuneScript は、マクロを対応します。 もしかしたら、 最近は マクロ というよりも メタプログラミング と言った方が 意味</description>
    </item>
    
    <item>
      <title>25. キャスト 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/cast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/cast/</guid>
      <description>LuneScript は、 3 つのタイプのキャストを提供します。 @@ @@@ @@= @@ @@ は、変換元の値の型を実行時にチェックせずに強制的に型変換します。 let val1:stem = 1; let val2:int = val1@@int; 次のよう</description>
    </item>
    
    <item>
      <title>26. subfile 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/subfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/subfile/</guid>
      <description>モジュールの処理が大きくなると、それに伴ないファイルが肥大化する。 ファイルの肥大化に良いことはないため、 このような場合はモジュールの責務を細</description>
    </item>
    
    <item>
      <title>A. Lua のトランスコンパイラ LuneScript を開発した理由</title>
      <link>https://ifritjp.github.io/documents/lunescript/reason/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/reason/</guid>
      <description>Lua は軽量で、かつ実行パフォーマンスの高い言語である。 Lua の 知名度は、同じスクリプト系言語の Ruby や Python, JavaScript 等とは 比べるまでもなく低いが、 システムの拡張</description>
    </item>
    
    <item>
      <title>A. トランスコンパイラ開発のすゝめ</title>
      <link>https://ifritjp.github.io/documents/lunescript/recommend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/recommend/</guid>
      <description>LuneScript 入門のアドベントカレンダー最後の記事は、 これまでとは趣向を変えてトランスコンパイラ開発そのものについて扱っていきます。 トランスコンパイラ開</description>
    </item>
    
    <item>
      <title>A.イマドキな開発環境でもっと楽しよう</title>
      <link>https://ifritjp.github.io/documents/lunescript/completion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/completion/</guid>
      <description>皆さんは Lua の開発に、エディタは何を使用しているでしょうか？ Lua Development Tools や Atom, VSCode のようなイマドキな機能満載な環境ですか？ それとも、emacs や vim などの</description>
    </item>
    
    <item>
      <title>Box 編</title>
      <link>https://ifritjp.github.io/documents/lunescript/box/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/box/</guid>
      <description>これは、検討中の情報です。 現在は利用できません。 Nilable 型 前述している通り、 Generics の実型パラメータに nilable は指定できません。 この制限により、次の new Test( val ) は</description>
    </item>
    
    <item>
      <title>Z. Go 言語へのトランスコンパイル</title>
      <link>https://ifritjp.github.io/documents/lunescript/go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/go/</guid>
      <description>LuneScript から Go 言語へのトランスコンパイルを検討中。 ここでは、検討中の内容を記録する。 ねらい LuneScript から Go 言語へのトランスコンパイルの狙いは次の通り。 LuneScript の</description>
    </item>
    
    <item>
      <title>全文検索用結合ファイル</title>
      <link>https://ifritjp.github.io/documents/lunescript/all/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lunescript/all/</guid>
      <description>全文検索し易いように、LuneScript 解説ドキュメントを結合したものです。 トランスコンパイラ LuneScript で Lua の開発をもっと楽に!! Lua は非常にコンパ</description>
    </item>
    
  </channel>
</rss>