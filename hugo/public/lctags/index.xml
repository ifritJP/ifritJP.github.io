<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C/C&#43;&#43; ソースコードタグシステム lctags の紹介 on 公開技術情報</title>
    <link>https://ifritjp.github.io/documents/lctags/</link>
    <description>Recent content in C/C&#43;&#43; ソースコードタグシステム lctags の紹介 on 公開技術情報</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    
	<atom:link href="https://ifritjp.github.io/documents/lctags/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C/C&#43;&#43; の enum 補完 by lctags on emacs</title>
      <link>https://ifritjp.github.io/documents/lctags/enum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lctags/enum/</guid>
      <description>C/C++ でコーディングしていると、 enum を使うことが多いと思います。 lctags を利用することで、簡単に enum 補完が出来るようになります。 他の補完ツールでも、 prefix を打</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; の変数サイズ確認 by lctags on emacs</title>
      <link>https://ifritjp.github.io/documents/lctags/varsize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lctags/varsize/</guid>
      <description>C/C++ ではデータサイズを意識して開発することが必要です。 小さいサイズのデータはスタック上に作れば良いですが、 大きいサイズのデータをスタック上に作</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; の特定シンボルをハイライト by lctags on emacs</title>
      <link>https://ifritjp.github.io/documents/lctags/highlight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lctags/highlight/</guid>
      <description>IDE には、カーソル位置の変数と、その変数を参照している箇所を ハイライト表示する機能があります。 この機能を利用することで、 関数に何か不具合が起き</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; ソースコードをリファクタリング by lctags on emacs (リネーム編)</title>
      <link>https://ifritjp.github.io/documents/lctags/rename/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lctags/rename/</guid>
      <description>lctags は、変数名、引数名のリネームをサポートします。 多くの場合は、emacs が提供している文字列置換でも問題なくリネームできますが、 リネーム対象</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; ソースコードタグシステム lctags の紹介</title>
      <link>https://ifritjp.github.io/documents/lctags/introduce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lctags/introduce/</guid>
      <description>まえがき 忙しい人はこのセクションを飛して、 「lctags の紹介」 に進んでください。 ソースコードタグシステムとは プログラミングしていると、 必ず</description>
    </item>
    
    <item>
      <title>C言語/C&#43;&#43; コードを解析してインタラクティブなコールグラフ表示 by lctags</title>
      <link>https://ifritjp.github.io/documents/lctags/callgraph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lctags/callgraph/</guid>
      <description>lctags で解析した C言語/C++ コードの情報を基に、 インタラクティブなコールグラフ表示に対応しました。 従来からコールグラフ表示を対応していましたが</description>
    </item>
    
    <item>
      <title>C言語/C&#43;&#43; コードを解析してインタラクティブなモジュール構成図っぽいグラフ表示 by lctags</title>
      <link>https://ifritjp.github.io/documents/lctags/modulegraph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lctags/modulegraph/</guid>
      <description>lctags で解析した C言語/C++ コードの情報を基に、 インタラクティブなモジュール構成っぽい図を表示できるように対応しました。 モジュール構成っぽい図</description>
    </item>
    
    <item>
      <title>lctags で C 言語の関数コールを簡単に</title>
      <link>https://ifritjp.github.io/documents/lctags/callfunc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lctags/callfunc/</guid>
      <description>ある関数をコールする際、その関数の名前がうろ覚えの場合や、 使いたい関数がどのヘッダで定義しているか分からないケースが多いと思います。 lctags では、</description>
    </item>
    
    <item>
      <title>lctags のプロジェクト簡易登録</title>
      <link>https://ifritjp.github.io/documents/lctags/register/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lctags/register/</guid>
      <description>lctags を利用するには、 解析対象のソースファイル毎にコンパイルオプションを登録する必要があります。 これは、 lctags の解析処理のバックエンドとして利用して</description>
    </item>
    
    <item>
      <title>lctags を使って C/C&#43;&#43; ソースコードをリファクタリング(サブルーチン化編)</title>
      <link>https://ifritjp.github.io/documents/lctags/subroutine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lctags/subroutine/</guid>
      <description>コーディングしていると、関数が肥大化していくことが良くあります。 関数の肥大化は、メンテナンス性や可読性が落ちる原因になるため、 リファクタリン</description>
    </item>
    
    <item>
      <title>lctags を開発している時に改めて感じた C 言語規格のイケてないところ</title>
      <link>https://ifritjp.github.io/documents/lctags/c-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lctags/c-language/</guid>
      <description>まずは宣伝 lctags は libclang の AST 情報を利用した C/C++ 向けのソースコードタグシステムです。 ベース機能はソースコードタグシステムですが、 シンボル補完機能等のコー</description>
    </item>
    
    <item>
      <title>Windows で lctags (C言語/C&#43;&#43; のタグジャンプ、コールグラフ、etc..)</title>
      <link>https://ifritjp.github.io/documents/lctags/windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lctags/windows/</guid>
      <description>C/C++ のコーディングサポートツールとして lctags を開発していますが、 Linux 上で動作させることを想定して開発しています。 とはいえ、日本のエンジニアは Windows を使用</description>
    </item>
    
  </channel>
</rss>