<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C/C&#43;&#43; 言語プログラマのための Lua 入門リファレンス on 公開技術情報</title>
    <link>https://ifritjp.github.io/documents/lua/</link>
    <description>Recent content in C/C&#43;&#43; 言語プログラマのための Lua 入門リファレンス on 公開技術情報</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language><atom:link href="https://ifritjp.github.io/documents/lua/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C インタフェース詳細編</title>
      <link>https://ifritjp.github.io/documents/lua/detail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lua/detail/</guid>
      <description>これは、 Lua から C の関数をコールしたときの振舞の詳細を説明するドキュメントです。 Lua と C のインタフェースを書くのが目的の場合は次の内容だけで十分</description>
    </item>
    
    <item>
      <title>C インタフェース編</title>
      <link>https://ifritjp.github.io/documents/lua/interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lua/interface/</guid>
      <description>これは、C/C++ 言語のプログラマがこれだけ読めば Lua と C のインタフェースを問題なく書けるようになることを目的にしたドキュメントです。 最低限、</description>
    </item>
    
    <item>
      <title>fengari の使い方 (Lua を Web ブラウザで動かす方法)</title>
      <link>https://ifritjp.github.io/documents/lua/fengari/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lua/fengari/</guid>
      <description>Lua を Web ブラウザで動かす技術がいくつかある。 最初期のモノは lua.vm.js だろうか？ ただ lua.vm.js は開発が停止してから 4 年経過しており、今から使うには躊躇する。 そこ</description>
    </item>
    
    <item>
      <title>Lua 5.4 の主な変更点</title>
      <link>https://ifritjp.github.io/documents/lua/lua5.4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lua/lua5.4/</guid>
      <description>Lua 5.4 が 2020/6/29 にリリースされた。 主な変更点は次の通り new generational mode for garbage collection to-be-closed variables const variables userdata can have multiple user values new implementation for math.random warning system debug information about function arguments and returns new semantics for the integer &amp;#39;for&amp;#39; loop optional &amp;#39;init&amp;#39; argument to &amp;#39;string.gmatch&amp;#39; new functions &amp;#39;lua_resetthread&amp;#39; and &amp;#39;coroutine.close&amp;#39; string-to-number</description>
    </item>
    
    <item>
      <title>Lua でやりがちなミス</title>
      <link>https://ifritjp.github.io/documents/lua/anti-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lua/anti-pattern/</guid>
      <description>Lua は少し癖のある言語なので、その癖を知らないとミスに繋がることがあります。 この記事では Lua のコードを組む際に、やってしまいがちなミスについて説</description>
    </item>
    
    <item>
      <title>ポインタ編</title>
      <link>https://ifritjp.github.io/documents/lua/pointer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/documents/lua/pointer/</guid>
      <description>これは、 C/C++ のポインタを C-Lua 間で受け渡しする際の実装方法を説明するものです。 簡単に結論を先に言うと、 luaL_newmetatable() と lua_setmetatable() をちゃんと使おうということです。 C/C++ のポ</description>
    </item>
    
  </channel>
</rss>
