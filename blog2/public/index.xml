<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hoge blog</title>
    <link>https://ifritjp.github.io/blog2/public/</link>
    <description>Recent content on hoge blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 16 Jan 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ifritjp.github.io/blog2/public/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HID Keyboard の Key スキャンコード</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2022/2022-01-16-keyboard-key-scan-code/</link>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2022/2022-01-16-keyboard-key-scan-code/</guid>
      <description>普段、何気に使っている keyboard。 このキーボードがどのように動いているか。 そして、カスタマイズするにはどうすれば良いかを簡単に説明して</description>
    </item>
    
    <item>
      <title>Hardware Keyboard Remapper(OS に依存しないキーボードのキー入れ替え)を作った</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2022/2022-01-10-hw-keyboard-remapper/</link>
      <pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2022/2022-01-10-hw-keyboard-remapper/</guid>
      <description>皆さんはキーボードのキーを入れ替えてますか？ キー入れ替えのメジャーな用途は、 Ctrl キーと Cap Lock キーの入れ替えでしょう。 そのような人は、 「OS のキー</description>
    </item>
    
    <item>
      <title>液晶ディスプレイメーカーのドット抜け保証</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-12-05-display-dots/</link>
      <pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-12-05-display-dots/</guid>
      <description>4K ディスプレイが欲しくなったので調べものをしている。 液晶ディスプレイを選ぶ際、用途によってさまざまな観点でチェックするだろう。 しかし、誰もが</description>
    </item>
    
    <item>
      <title>LuneScript がエラーハンドリングと大域脱出をサポートできていない理由</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-11-14-lunescript-error-handling/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-11-14-lunescript-error-handling/</guid>
      <description>数ヶ月間 LuneScript から離れていますが、生存アピールのためにちょっと触れておきます 今日現在、 LuneScript は言語機能としてエラーハンドリングと大域脱出をサポートし</description>
    </item>
    
    <item>
      <title>WSL2 共存による VirtualBox/VMWare の性能低下と、性能重視時の排他設定方法</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-11-08-wsl2-virtualbox/</link>
      <pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-11-08-wsl2-virtualbox/</guid>
      <description>VirtualBox/VMWare と WSL2 は共存可能です。 しかし、共存させると VirtualBox/VMWare 上の GuestOS にオーバーヘッドがかかります。 今回はオーバーヘッドの概要と、共存と排他の設定切り替え方法の</description>
    </item>
    
    <item>
      <title>MS Teams client の作り方</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-08-30-teams-client/</link>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-08-30-teams-client/</guid>
      <description>自作ツールで、MS Teams に対して投稿を read/write する方法について書きます。 Teams の管理者権限の許可が必須 「 Teams の管理者権限の許可が必須 」です。 大事なことなので</description>
    </item>
    
    <item>
      <title>asciidoc の pdf 化</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-07-26-asciidoc-2-pdf/</link>
      <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-07-26-asciidoc-2-pdf/</guid>
      <description>asciidoctor-pdf を利用すると asciidoc を pdf 化できます。 ここでは、 asciidoctor-pdf のセットアップと pdf 化時のレイアウト変更方法について説明します。 asciidoctor-pdf のセットアップ asciidoctor-pdf が既にインストー</description>
    </item>
    
    <item>
      <title>org-mode ドキュメントの翻訳ツールの使い方</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-07-25-org-traslation-intro/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-07-25-org-traslation-intro/</guid>
      <description>先日の記事に書いた org-mode ドキュメントの翻訳ツールを作成したので、 今回はそのツールの使用方法を書きます。 セットアップ golang がインストールされている環境</description>
    </item>
    
    <item>
      <title>org-mode ドキュメントの翻訳ツール検討</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-07-19-org-traslation/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-07-19-org-traslation/</guid>
      <description>私は org-mode を使って LuneScript のリファレンスを作成しています。 日本語のリファレンスを書くのも大変ですが、 それを英訳しようとすると気が遠くなります。 そこで機</description>
    </item>
    
    <item>
      <title>LuneScript のトランスコンパイル高速化 (スタック割り当て)</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-07-02-lunescript-value-assigned-stack/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-07-02-lunescript-value-assigned-stack/</guid>
      <description>今回の記事は、 先日検討した LuneScript のクラスのオブジェクトを スタックに割り当てて高速化できるかどうか？の検討結果です。 結果 今回の検討結果は以下の通り</description>
    </item>
    
    <item>
      <title>LuneScript のトランスコンパイル高速化 (トランスコンパイル時間を 2273 パーセント改善)</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-06-28-lunescript-build-time-2000/</link>
      <pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-06-28-lunescript-build-time-2000/</guid>
      <description>先月から続いて、LuneScript のトランスコンパイル高速化作業をしています。 セルフホストのトランスコンパイル時間 今回の時間短縮は以下の通</description>
    </item>
    
    <item>
      <title>LuneScript のセルフホストのマルチスレッド化 (トランスコンパイル時間を 1412 パーセント改善)</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-06-04-lunescript-selfhost-para/</link>
      <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-06-04-lunescript-selfhost-para/</guid>
      <description>LuneScript の高速化のため、マルチスレッド化を行ないました。 今回は、LuneScript のどこをマルチスレッド化したのか、 マルチスレッド化で何故高速化</description>
    </item>
    
    <item>
      <title>LuneScript の型の Mutable 制御を追加</title>
      <link>https://ifritjp.github.io/blog2/public/drafts/2021-05-28-add-mutable-control/</link>
      <pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/drafts/2021-05-28-add-mutable-control/</guid>
      <description>現在、 LuneScript のメンバの型の Mutable 制御には以下がある。 mutable (デフォルト) immutable (&amp;amp;) allmut これだと、どうも使い勝手が悪いケースがある。 immutable なインスタンスを生成する場合</description>
    </item>
    
    <item>
      <title>LuneScript のこれからの予定</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-26-lunescript-plan/</link>
      <pubDate>Wed, 26 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-26-lunescript-plan/</guid>
      <description>今月上旬に TypeScriptToLua の存在を知ったことで、 「Lua のトランスコンパイラ」という LuneScript の主な 存在意義 がほとんど消えてしまいました。 それによって LuneScript 開発に対す</description>
    </item>
    
    <item>
      <title>LuneScript のトランスコンパイル時間を 1157 パーセント改善した件</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-25-lunescript-improved-build-time/</link>
      <pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-25-lunescript-improved-build-time/</guid>
      <description>前回から引き続き LuneScript のトランスコンパイル時間短縮を行なっています。 今回の時間短縮は以下の通りです。 lua go lua/go 改善前(6e5661a9) 25.69 sec 5.84 sec 440% 改</description>
    </item>
    
    <item>
      <title>LuneScript のスレッドにおける mutable 制御</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-16-lunescript-thread-mutable-control/</link>
      <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-16-lunescript-thread-mutable-control/</guid>
      <description>LuneScript は golang へのトランスコンパイルをサポートしている。 golang 対応の付加機能として、LuneScript には限定的な非同期処理を提供している。 今回は、こ</description>
    </item>
    
    <item>
      <title>Go の関数パフォーマンス</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-15-go-func-performance/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-15-go-func-performance/</guid>
      <description>LuneScript は golang へのトランスコンパイルをサポートしている。 golang 対応の付加機能として、LuneScript には限定的なスレッド機能を提供している。 「限定的</description>
    </item>
    
    <item>
      <title>Language Server Protocol (LSP) メモ</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-04-lsp/</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-04-lsp/</guid>
      <description>Language Server Protocol (LSP) の調査メモ。 後でまとめる予定だが、まずは調べた情報を列挙していく。 LSP とは LSP は、プログラミング開発する上で役立つ様々なサポート機能を定</description>
    </item>
    
    <item>
      <title>LuneScript の import と meta</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-04-lunescript-meta/</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-04-lunescript-meta/</guid>
      <description>LuneScript は、モジュールを利用する際に import 命令を使用する。 この import 命令は、次の処理を行う。 指定のモジュールの .lns ファイルを解析し、何を定義しているかを調べ</description>
    </item>
    
    <item>
      <title>Rapberry pi 4 で構築する NAS (USB HDD UASP) の性能</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-04-03-raspi-usb-hdd/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-04-03-raspi-usb-hdd/</guid>
      <description>Rapberry pi 4 で簡易的な NAS を構築している。 メイン PC の OS が Windows なので、 NAS で使っている HDD を Windows PC と直接接続してアクセスすることを考えて、 NTFS フォーマットの USB HDD</description>
    </item>
    
  </channel>
</rss>
