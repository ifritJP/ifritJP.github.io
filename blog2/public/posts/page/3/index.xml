<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on hoge blog</title>
    <link>https://ifritjp.github.io/blog2/public/posts/</link>
    <description>Recent content in Posts on hoge blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 23 Jul 2023 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ifritjp.github.io/blog2/public/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>raspberry pi の sdcard 書き換え回数寿命を考える</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-02-17-rasp-sdcard/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-02-17-rasp-sdcard/</guid>
      <description>raspberry pi でローカルサーバを立ち上げているが、 この sdcard 寿命が気になったので調べてみた。 sdcard はでなく、 hdd や ssd で運用する方法もあるが、 sdcard で運用できる方がラ</description>
    </item>
    
    <item>
      <title>highlight.js で独自言語の色付けを追加</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-02-01-hilightjs/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-02-01-hilightjs/</guid>
      <description>LuneScript の解説サイトは、 hugo を使用して構築している。 その解説サイトに掲載しているソースコードは、 hugo によって解析されて、色付けに必要な &amp;lt;span class=&amp;#34;&amp;#34;&amp;gt; が付加され、</description>
    </item>
    
    <item>
      <title>トランスコンパイラの作り方</title>
      <link>https://ifritjp.github.io/blog2/public/drafts/2020-12-23-how-to-make-transcompiler/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/drafts/2020-12-23-how-to-make-transcompiler/</guid>
      <description>LuneScript の開発を続けてきた振り返りとして、 「トランスコンパイラの作り方」 をまとめてみる。 自分でトランスコンパイラを作ってみたいという人には少しは参</description>
    </item>
    
    <item>
      <title>WSL2 と cygwin xorg を使って GUI 表示するまでのハマりどころ</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-12-09-wsl2-xwin/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-12-09-wsl2-xwin/</guid>
      <description>WSL2 と virtual BOX が共存できるようになったらしいので、 家の環境に WSL2 を入れてみました。 セットアップ自体は上手くいきましたが、 結果として virtual BOX のパフォーマン</description>
    </item>
    
    <item>
      <title>github actions でビルドしたモジュールを google drive にアップロード</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-12-05-lns-release/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-12-05-lns-release/</guid>
      <description>LuneScript の CI 環境として github actions を使用している。 この CI のテスト時にビルドした go 版 LuneScript のシングルバイナリを、 google drive にアップロードして公開するように対応した。 &amp;lt;https://drive.google.com/drive/folders/1S5NgeM6qIOIUC0rkBHqnWZcuhmsTqB2w&amp;gt;</description>
    </item>
    
    <item>
      <title>go の自作モジュールを github で公開して import するまで</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-11-28-golang-module/</link>
      <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-11-28-golang-module/</guid>
      <description>LuneScript 向けの別ツールを作ろうと思い、 LuneScript の go 向けランタイムを単独モジュールとして分割して管理すべく 奮闘した際の備忘録。 go のモジュール go は、 github に公開</description>
    </item>
    
    <item>
      <title>LuneScript のトランスコンパイル時間を 478 パーセント改善した件</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-11-08-lunescript-speed-up-batch/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-11-08-lunescript-speed-up-batch/</guid>
      <description>前回から引き続き LuneScript のトランスコンパイル時間短縮を行なっています。 今回の時間短縮は以下の通りです。 改善前(lua) 改善後(go) 参考 (lua batch) 参考 (luajit)</description>
    </item>
    
    <item>
      <title>LuneScript のトランスコンパイル時間を 425 パーセント改善した件</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-11-01-lunescript-speed-up/</link>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-11-01-lunescript-speed-up/</guid>
      <description>LuneScript は Lua 向けのトランスコンパイラで、 LuneScript 自体も Lua 上で動作しています。 また、LuneScript は LuneScript 自体の処理を、 LuneScript で開発する所謂セルフホスティン</description>
    </item>
    
    <item>
      <title>LuneScript のコード規模の推移を調べた</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-10-01-lunescript-codesize/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-10-01-lunescript-codesize/</guid>
      <description>これまでの LuneScript のコード規模の推移を調べてみた。 これは単純に LuneScript をセルフホストしている .lns ファイルの行数をトータルした結果。 よって、コメントや空行等</description>
    </item>
    
    <item>
      <title>emacs yasnippet の snippet を対応させるモード名に / 等のファイル名に使用できない文字がある場合</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-08-19-emacs-yasnippet/</link>
      <pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-08-19-emacs-yasnippet/</guid>
      <description>emacs で snippet を管理するパッケージに yasnippet がある。 yasnippet はメジャーモード毎に snippet を登録しておき、 編集中のメジャーモードに合せて snippet を呼び出すことができる。 yasnippet に snippet</description>
    </item>
    
    <item>
      <title>LuneScript の開発工数</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-08-01-lunescript-man-hour/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-08-01-lunescript-man-hour/</guid>
      <description>LuneScript の開発を続けて約 2 年経過。 2年間ずっと開発し続けているわけではないけど、 かなりの時間を LuneScript の開発にあてている。 そんな訳で、今回は LuneScript の開発工数</description>
    </item>
    
    <item>
      <title>Google Cloud Functions の deploy で &#39;missing dot in first path element; Error ID: 3182a79f&#39; エラー</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-07-18-gcp-function-deploy/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-07-18-gcp-function-deploy/</guid>
      <description>GCP から「Go 1.11 は使えなくなるから Go 1.13 にして」という通知があったので、 忘れないうちに Go 1.13 にして deploy をしたら、次のエラーが出た。 ERROR: (gcloud.functions.deploy) OperationError: code=13, message=Build failed: go mod: -require=xxxxxx/hoge/foo@v0.0.0:</description>
    </item>
    
    <item>
      <title>LuneScript の Google 検索ワード</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-07-15-lunescript-search/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-07-15-lunescript-search/</guid>
      <description>先日、 Google 翻訳で lunescript が固有名詞として認識された可能性について ネタにしたが、 どうやら本当に lunescript が固有名詞として認識されたのではないかと思われる。 とい</description>
    </item>
    
    <item>
      <title>デュアルブートの ubuntu を upgrade したら windows の BitLocker が PIN の認証失敗するようになった</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-07-10-bitlocker/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-07-10-bitlocker/</guid>
      <description>イマドキは少数派だと思うが、 PC に ubuntu と windows のデュアルブートを設定している。 さらに面倒なことに、 windows は BitLocker で暗号化 &amp;amp; PIN 認証を設定している。 そして、この</description>
    </item>
    
    <item>
      <title>Go 言語 (golang) について思ったこと</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-06-27-golang/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-06-27-golang/</guid>
      <description>Go の勉強を兼て「これ」を Go で作っていたんだが、その時感じた Go の特徴をまとめておく。 Go は気軽に書けるのに、非常に高い実行パフォーマンスを出せる</description>
    </item>
    
    <item>
      <title>LuneScript の Google 翻訳</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-06-26-lunescript-trans/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-06-26-lunescript-trans/</guid>
      <description>以前 lunescript の紹介記事を書いている時に、 lunescript の日本語訳がふと気になったんで調べていたんだが、 その時の Google 翻訳の結果が衝撃的だった。 &amp;lt;https://ifritjp.github.io/documents/lunescript/tutorial1/#headline-3&amp;gt; で、久し振りに Google 翻</description>
    </item>
    
    <item>
      <title>dot のレイアウト指定</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-06-09-graph/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-06-09-graph/</guid>
      <description>tunnel ツールのネタを書いた時、 dot を使ってグラフを作った。 dot は手軽にグラフを書ける便利なツールだが、 レイアウト制御に難があると思う。 グラフ作成ツー</description>
    </item>
    
    <item>
      <title>go の proxy server (github.com/elazarl/goproxy) の使い方</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-06-04-go-proxy/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-06-04-go-proxy/</guid>
      <description>go で proxy server を建てるには、 github.com/elazarl/goproxy を使うと簡単に実現できる。 https://github.com/elazarl/goproxy github の readme を見れば、簡単な使い方が載っているので特に問題はないだろう。 ただ、一点だけハマった</description>
    </item>
    
    <item>
      <title>Tunnel/Reverse Tunnel over websocket を作った</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-05-29-tunnel/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-05-29-tunnel/</guid>
      <description>とある理由から 「Tunnel/Reverse Tunnel over websocket」 が必要になったので作ってみた。 「Tunnel/Reverse Tunnel over webs</description>
    </item>
    
    <item>
      <title>Hugo を org-mode で使う時の注意点</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-03-29-hugo-org/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-03-29-hugo-org/</guid>
      <description>技術情報を GitHub Pages で公開するにあたって、 Hugo を使うことにした。 Hugo は Markdown で静的サイトを構築するツールだが、org-mode にも対応している。 「対応」と</description>
    </item>
    
  </channel>
</rss>
