<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>outlook on hoge blog</title>
    <link>https://ifritjp.github.io/blog2/public/tags/outlook/</link>
    <description>Recent content in outlook on hoge blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 07 Feb 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ifritjp.github.io/blog2/public/tags/outlook/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LuneScript のコレクション側を Go の generics を利用するように変更</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2023/2023-02-27-go-generics3/</link>
      <pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2023/2023-02-27-go-generics3/</guid>
      <description>&amp;lt;../../2023/2023-02-11-go-generics2/&amp;gt; 前回の記事で書いた通り、 go の generics のパフォーマンスが向上したため、 LuneScript の v1.6.0 で go の generics を利用するように対応しました。 なお、現状は collection 型の対応に限定して</description>
    </item>
    
    <item>
      <title>Golang の generics パフォーマンスがもの凄く改善されていた</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2023/2023-02-11-go-generics2/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2023/2023-02-11-go-generics2/</guid>
      <description>以前 Golang 1.19.2 の generics のパフォーマンスを計測したところ、 generics を使ったケースと、自前で any からキャストするケースを比較すると、 なぜか自前で any からキャストする</description>
    </item>
    
    <item>
      <title>LuneScript のタプルの go 実装</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2023/2023-01-29-tuple-implementation/</link>
      <pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2023/2023-01-29-tuple-implementation/</guid>
      <description>LuneScript の v1.5.3 からタプルを対応している。 このタプルの go 実装についてパフォーマンスを調べた内容を載せておく。 LuneScript のタプルの go 変換初期実装 ここでは、Lun</description>
    </item>
    
    <item>
      <title>Raspberry pi に接続していた USB HDD が調子悪いので色々と対応してみた(未解決)</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2023/2023-01-09-raspi-strange-hdd/</link>
      <pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2023/2023-01-09-raspi-strange-hdd/</guid>
      <description>Raspberry pi でサーバ運用を始めて約 2 年。 どうにも最近 Raspberry pi に接続している USB HDD の調子がイマイチだったので、 その対応を行なった。 ただし、未解決。。。 ここで</description>
    </item>
    
    <item>
      <title>actix-web (Rust の web フレームワーク)</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2023/2023-01-06-actix-web/</link>
      <pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2023/2023-01-06-actix-web/</guid>
      <description>Web サーバを作成するにあたり actix-web を使ってみたので、 初心者の目線から見た感想など。 actix-web 世の中には言語ごとに様々な web フレームワークがありますが、 actix-web は Rust</description>
    </item>
    
    <item>
      <title>Golang の WASM (JavaScript の非同期処理 async との連携)</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2022/2022-12-18-go-wasm-async/</link>
      <pubDate>Sun, 18 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2022/2022-12-18-go-wasm-async/</guid>
      <description>go の wasm と、JavaScript の非同期処理との連携についてです。 基本的な go の wasm と JavaScript 間のインタフェースについては、 以前のネタを確認してください</description>
    </item>
    
    <item>
      <title>FDM 3D プリンタのスライス設定と STL エラー対策</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2022/2022-12-04-3d-printer-slice/</link>
      <pubDate>Sun, 04 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2022/2022-12-04-3d-printer-slice/</guid>
      <description>今回も引き続き 3D プリンタ系の話です。 3D プリントの出来 3D プリントの出来は次の要素で決まります。 3D プリンタの性能 フィラメントの性能 スライサーの性</description>
    </item>
    
    <item>
      <title>100 均で作る超お手軽・安価な 3D プリンタ用フィラメント除湿・送出・保管ボックス</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2022/2022-11-27-3d-printer-filament-box/</link>
      <pubDate>Sun, 27 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2022/2022-11-27-3d-printer-filament-box/</guid>
      <description>今回は珍しくソフト系のネタではなく、3D プリンタ系の話です。 FDM 式は面倒が少ない 3D プリンタを購入するにあたり、事前に色々と調べた結果、 光造形式</description>
    </item>
    
    <item>
      <title>Golang の Heap メモリ制限</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2022/2022-10-27-go-limit-heap/</link>
      <pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2022/2022-10-27-go-limit-heap/</guid>
      <description>go は GC で heap メモリを管理している。 Java の場合、最大 heap サイズを指定し、 そのサイズを越えた場合は OutOfMemoryError になる。 最大 heap サイズが指定されていない場合はデフォ</description>
    </item>
    
    <item>
      <title>Golang の generics パフォーマンス</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2022/2022-10-15-go-generics/</link>
      <pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2022/2022-10-15-go-generics/</guid>
      <description>LuneScript は、 Golang (1.16 以降)へのトランスコンパイルを対応しています。 また、LuneScript は Generics に対応しています。 一方で、 Golang は version 1.18 から Generics に対応していま</description>
    </item>
    
    <item>
      <title>Golang の WASM (Golang から JavaScript の呼び出し, JavaScript から Golang の呼び出し)</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2022/2022-09-19-go-wasm/</link>
      <pubDate>Mon, 19 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2022/2022-09-19-go-wasm/</guid>
      <description>LuneScript Web Frontは今迄 fengari を利用していましたが、 golang の wasm で動かせるようにサポートしました。 その際に golang の wasm の利用方法について調べたことをまとめておき</description>
    </item>
    
    <item>
      <title>LuneScript の工数( SLOC )</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2022/2022-08-04-sloc/</link>
      <pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2022/2022-08-04-sloc/</guid>
      <description>&amp;lt;http://localhost:1313/posts/2020/2020-08-01-lunescript-man-hour/&amp;gt; 以前 LuneScript の工数を考えたが、今回は別の面から工数を考えてみる。 ソフトウェア開発分析データ集2020 &amp;lt;https://www.ipa.go.jp/ikc/reports/20200930.html&amp;gt; 上記のリンク先の資料「ソフトウェア開発分析</description>
    </item>
    
    <item>
      <title>WebSocket client と TCP client の中継ツールを作った</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2022/2022-06-01-wstcplink/</link>
      <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2022/2022-06-01-wstcplink/</guid>
      <description>wstcplink を作った。 &amp;lt;https://github.com/ifritJP/wstcplink&amp;gt; これが何かというと、 WebSocket client と TCP client の中継ツールだ。 次のような感じ。 ⇔⇔⇔⇔⇔⇔⇔⇔ Webブラウザ → このツール ← tcp クライアント ⇔⇔⇔</description>
    </item>
    
    <item>
      <title>Raspberry pi イメージのバックアップ</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2022/2022-04-30-raspi-backup/</link>
      <pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2022/2022-04-30-raspi-backup/</guid>
      <description>家で運用している Raspberry pi サーバイメージのバックアップを shrink するのに どうするのが良いのか調べていたら、 https://github.com/Drewsif/PiShrink を使えばいいだけだということが分かった。 事前</description>
    </item>
    
    <item>
      <title>M5stack(ESP32) で Bluetooth(btstack) の機能を利用する際の注意点</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2022/2022-02-23-m5stack-btstack/</link>
      <pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2022/2022-02-23-m5stack-btstack/</guid>
      <description>M5stack の公式 Web サイトを見ると、 M5stack の開発環境は以下のものが挙げられています。 &amp;lt;https://docs.m5stack.com/en/platform&amp;gt; UIFlow Arduino Camera Series Micropython .NET nanoFramework これらは、ソフトウェアを簡単に開発することにフォーカス</description>
    </item>
    
    <item>
      <title>OS に依存しない Bluetooth キーボードのキー入れ替え (M5stack版)</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2022/2022-02-22-bt-keyboard-remapper/</link>
      <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2022/2022-02-22-bt-keyboard-remapper/</guid>
      <description>前回 Raspberry pi zero w 版の keyboard remapper に引き続き、 M5stack 版の keyboard remapper を作成しました。 M5stack は、 Raspberry pi zero w と比べて以下の長所があります。 モデルによっては小型軽量 基板が剥き出し</description>
    </item>
    
    <item>
      <title>HID Keyboard の Key スキャンコード</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2022/2022-01-16-keyboard-key-scan-code/</link>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2022/2022-01-16-keyboard-key-scan-code/</guid>
      <description>普段、何気に使っている keyboard。 このキーボードがどのように動いているか。 そして、カスタマイズするにはどうすれば良いかを簡単に説明して</description>
    </item>
    
    <item>
      <title>Hardware Keyboard Remapper(OS に依存しないキーボードのキー入れ替え)を作った</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2022/2022-01-10-hw-keyboard-remapper/</link>
      <pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2022/2022-01-10-hw-keyboard-remapper/</guid>
      <description>皆さんはキーボードのキーを入れ替えてますか？ キー入れ替えのメジャーな用途は、 Ctrl キーと Cap Lock キーの入れ替えでしょう。 そのような人は、 「OS のキー</description>
    </item>
    
    <item>
      <title>液晶ディスプレイメーカーのドット抜け保証</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-12-05-display-dots/</link>
      <pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-12-05-display-dots/</guid>
      <description>4K ディスプレイが欲しくなったので調べものをしている。 液晶ディスプレイを選ぶ際、用途によってさまざまな観点でチェックするだろう。 しかし、誰もが</description>
    </item>
    
    <item>
      <title>LuneScript がエラーハンドリングと大域脱出をサポートできていない理由</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-11-14-lunescript-error-handling/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-11-14-lunescript-error-handling/</guid>
      <description>数ヶ月間 LuneScript から離れていますが、生存アピールのためにちょっと触れておきます 今日現在、 LuneScript は言語機能としてエラーハンドリングと大域脱出をサポートし</description>
    </item>
    
  </channel>
</rss>
