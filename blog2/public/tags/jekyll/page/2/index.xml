<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jekyll on hoge blog</title>
    <link>https://ifritjp.github.io/blog2/public/tags/jekyll/</link>
    <description>Recent content in jekyll on hoge blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 17 Jan 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ifritjp.github.io/blog2/public/tags/jekyll/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>asciidoc の pdf 化</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-07-26-asciidoc-2-pdf/</link>
      <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-07-26-asciidoc-2-pdf/</guid>
      <description>asciidoctor-pdf を利用すると asciidoc を pdf 化できます。 ここでは、 asciidoctor-pdf のセットアップと pdf 化時のレイアウト変更方法について説明します。 asciidoctor-pdf のセットアップ asciidoctor-pdf が既にインストー</description>
    </item>
    
    <item>
      <title>org-mode ドキュメントの翻訳ツールの使い方</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-07-25-org-traslation-intro/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-07-25-org-traslation-intro/</guid>
      <description>先日の記事に書いた org-mode ドキュメントの翻訳ツールを作成したので、 今回はそのツールの使用方法を書きます。 セットアップ golang がインストールされている環境</description>
    </item>
    
    <item>
      <title>org-mode ドキュメントの翻訳ツール検討</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-07-19-org-traslation/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-07-19-org-traslation/</guid>
      <description>私は org-mode を使って LuneScript のリファレンスを作成しています。 日本語のリファレンスを書くのも大変ですが、 それを英訳しようとすると気が遠くなります。 そこで機</description>
    </item>
    
    <item>
      <title>LuneScript のトランスコンパイル高速化 (スタック割り当て)</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-07-02-lunescript-value-assigned-stack/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-07-02-lunescript-value-assigned-stack/</guid>
      <description>今回の記事は、 先日検討した LuneScript のクラスのオブジェクトを スタックに割り当てて高速化できるかどうか？の検討結果です。 結果 今回の検討結果は以下の通り</description>
    </item>
    
    <item>
      <title>LuneScript のトランスコンパイル高速化 (トランスコンパイル時間を 2273 パーセント改善)</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-06-28-lunescript-build-time-2000/</link>
      <pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-06-28-lunescript-build-time-2000/</guid>
      <description>先月から続いて、LuneScript のトランスコンパイル高速化作業をしています。 セルフホストのトランスコンパイル時間 今回の時間短縮は以下の通</description>
    </item>
    
    <item>
      <title>LuneScript のセルフホストのマルチスレッド化 (トランスコンパイル時間を 1412 パーセント改善)</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-06-04-lunescript-selfhost-para/</link>
      <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-06-04-lunescript-selfhost-para/</guid>
      <description>LuneScript の高速化のため、マルチスレッド化を行ないました。 今回は、LuneScript のどこをマルチスレッド化したのか、 マルチスレッド化で何故高速化</description>
    </item>
    
    <item>
      <title>LuneScript の型の Mutable 制御を追加</title>
      <link>https://ifritjp.github.io/blog2/public/drafts/2021-05-28-add-mutable-control/</link>
      <pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/drafts/2021-05-28-add-mutable-control/</guid>
      <description>現在、 LuneScript のメンバの型の Mutable 制御には以下がある。 mutable (デフォルト) immutable (&amp;amp;) allmut これだと、どうも使い勝手が悪いケースがある。 immutable なインスタンスを生成する場合</description>
    </item>
    
    <item>
      <title>LuneScript のこれからの予定</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-26-lunescript-plan/</link>
      <pubDate>Wed, 26 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-26-lunescript-plan/</guid>
      <description>今月上旬に TypeScriptToLua の存在を知ったことで、 「Lua のトランスコンパイラ」という LuneScript の主な 存在意義 がほとんど消えてしまいました。 それによって LuneScript 開発に対す</description>
    </item>
    
    <item>
      <title>LuneScript のトランスコンパイル時間を 1157 パーセント改善した件</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-25-lunescript-improved-build-time/</link>
      <pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-25-lunescript-improved-build-time/</guid>
      <description>前回から引き続き LuneScript のトランスコンパイル時間短縮を行なっています。 今回の時間短縮は以下の通りです。 lua go lua/go 改善前(6e5661a9) 25.69 sec 5.84 sec 440% 改</description>
    </item>
    
    <item>
      <title>LuneScript のスレッドにおける mutable 制御</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-16-lunescript-thread-mutable-control/</link>
      <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-16-lunescript-thread-mutable-control/</guid>
      <description>LuneScript は golang へのトランスコンパイルをサポートしている。 golang 対応の付加機能として、LuneScript には限定的な非同期処理を提供している。 今回は、こ</description>
    </item>
    
    <item>
      <title>Go の関数パフォーマンス</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-15-go-func-performance/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-15-go-func-performance/</guid>
      <description>LuneScript は golang へのトランスコンパイルをサポートしている。 golang 対応の付加機能として、LuneScript には限定的なスレッド機能を提供している。 「限定的</description>
    </item>
    
    <item>
      <title>Language Server Protocol (LSP) メモ</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-04-lsp/</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-04-lsp/</guid>
      <description>Language Server Protocol (LSP) の調査メモ。 後でまとめる予定だが、まずは調べた情報を列挙していく。 LSP とは LSP は、プログラミング開発する上で役立つ様々なサポート機能を定</description>
    </item>
    
    <item>
      <title>LuneScript の import と meta</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-04-lunescript-meta/</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-05-04-lunescript-meta/</guid>
      <description>LuneScript は、モジュールを利用する際に import 命令を使用する。 この import 命令は、次の処理を行う。 指定のモジュールの .lns ファイルを解析し、何を定義しているかを調べ</description>
    </item>
    
    <item>
      <title>Rapberry pi 4 で構築する NAS (USB HDD UASP) の性能</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-04-03-raspi-usb-hdd/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-04-03-raspi-usb-hdd/</guid>
      <description>Rapberry pi 4 で簡易的な NAS を構築している。 メイン PC の OS が Windows なので、 NAS で使っている HDD を Windows PC と直接接続してアクセスすることを考えて、 NTFS フォーマットの USB HDD</description>
    </item>
    
    <item>
      <title>go1.16 の embed によるファイル埋め込み</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-02-28-go-embed/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-02-28-go-embed/</guid>
      <description>go1.16 から embed が利用可能になりました。 &amp;lt;https://golang.org/pkg/embed/&amp;gt; embed によって、 プログラムにバイナリデータを埋め込む処理が簡単に行なえるようになります。 LuneScript のコンパイラは、 go で</description>
    </item>
    
    <item>
      <title>raspberry pi の sdcard 書き換え回数寿命を考える</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-02-17-rasp-sdcard/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-02-17-rasp-sdcard/</guid>
      <description>raspberry pi でローカルサーバを立ち上げているが、 この sdcard 寿命が気になったので調べてみた。 sdcard はでなく、 hdd や ssd で運用する方法もあるが、 sdcard で運用できる方がラ</description>
    </item>
    
    <item>
      <title>highlight.js で独自言語の色付けを追加</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2021/2021-02-01-hilightjs/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2021/2021-02-01-hilightjs/</guid>
      <description>LuneScript の解説サイトは、 hugo を使用して構築している。 その解説サイトに掲載しているソースコードは、 hugo によって解析されて、色付けに必要な &amp;lt;span class=&amp;#34;&amp;#34;&amp;gt; が付加され、</description>
    </item>
    
    <item>
      <title>トランスコンパイラの作り方</title>
      <link>https://ifritjp.github.io/blog2/public/drafts/2020-12-23-how-to-make-transcompiler/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/drafts/2020-12-23-how-to-make-transcompiler/</guid>
      <description>LuneScript の開発を続けてきた振り返りとして、 「トランスコンパイラの作り方」 をまとめてみる。 自分でトランスコンパイラを作ってみたいという人には少しは参</description>
    </item>
    
    <item>
      <title>WSL2 と cygwin xorg を使って GUI 表示するまでのハマりどころ</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-12-09-wsl2-xwin/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-12-09-wsl2-xwin/</guid>
      <description>WSL2 と virtual BOX が共存できるようになったらしいので、 家の環境に WSL2 を入れてみました。 セットアップ自体は上手くいきましたが、 結果として virtual BOX のパフォーマン</description>
    </item>
    
    <item>
      <title>github actions でビルドしたモジュールを google drive にアップロード</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-12-05-lns-release/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-12-05-lns-release/</guid>
      <description>LuneScript の CI 環境として github actions を使用している。 この CI のテスト時にビルドした go 版 LuneScript のシングルバイナリを、 google drive にアップロードして公開するように対応した。 &amp;lt;https://drive.google.com/drive/folders/1S5NgeM6qIOIUC0rkBHqnWZcuhmsTqB2w&amp;gt;</description>
    </item>
    
  </channel>
</rss>
