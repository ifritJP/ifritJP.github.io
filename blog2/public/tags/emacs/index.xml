<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>emacs on hoge blog</title>
    <link>https://ifritjp.github.io/blog2/public/tags/emacs/</link>
    <description>Recent content in emacs on hoge blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 13 May 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ifritjp.github.io/blog2/public/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LuneSciprt のコード規模の推移を調べた</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-10-01-lunescript-codesize/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-10-01-lunescript-codesize/</guid>
      <description>これまでの LuneSciprt のコード規模の推移を調べてみた。 これは単純に LuneSciprt をセルフホストしている .lns ファイルの行数をトータルした結果。 よって、コメントや空行等</description>
    </item>
    
    <item>
      <title>emacs yasnippet の snippet を対応させるモード名に / 等のファイル名に使用できない文字がある場合</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-08-19-emacs-yasnippet/</link>
      <pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-08-19-emacs-yasnippet/</guid>
      <description>emacs で snippet を管理するパッケージに yasnippet がある。 yasnippet はメジャーモード毎に snippet を登録しておき、 編集中のメジャーモードに合せて snippet を呼び出すことができる。 yasnippet に snippet</description>
    </item>
    
    <item>
      <title>LuneScript の開発工数</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-08-01-lunescript-man-hour/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-08-01-lunescript-man-hour/</guid>
      <description>LuneScript の開発を続けて約 2 年経過。 2年間ずっと開発し続けているわけではないけど、 かなりの時間を LuneScript の開発にあてている。 そんな訳で、今回は LuneScript の開発工数</description>
    </item>
    
    <item>
      <title>Google Cloud Functions の deploy で &#39;missing dot in first path element; Error ID: 3182a79f&#39; エラー</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-07-18-gcp-function-deploy/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-07-18-gcp-function-deploy/</guid>
      <description>GCP から「Go 1.11 は使えなくなるから Go 1.13 にして」という通知があったので、 忘れないうちに Go 1.13 にして deploy をしたら、次のエラーが出た。 ERROR: (gcloud.functions.deploy) OperationError: code=13, message=Build failed: go mod: -require=xxxxxx/hoge/foo@v0.0.0:</description>
    </item>
    
    <item>
      <title>LuneScript の Google 検索ワード</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-07-15-lunescript-search/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-07-15-lunescript-search/</guid>
      <description>先日、 Google 翻訳で lunescript が固有名詞として認識された可能性について ネタにしたが、 どうやら本当に lunescript が固有名詞として認識されたのではないかと思われる。 とい</description>
    </item>
    
    <item>
      <title>デュアルブートの ubuntu を upgrade したら windows の BitLocker が PIN の認証失敗するようになった</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-07-10-bitlocker/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-07-10-bitlocker/</guid>
      <description>イマドキは少数派だと思うが、 PC に ubuntu と windows のデュアルブートを設定している。 さらに面倒なことに、 windows は BitLocker で暗号化 &amp;amp; PIN 認証を設定している。 そして、この</description>
    </item>
    
    <item>
      <title>Go 言語 (golang) について思ったこと</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-06-27-golang/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-06-27-golang/</guid>
      <description>Go の勉強を兼て「これ」を Go で作っていたんだが、その時感じた Go の特徴をまとめておく。 Go は気軽に書けるのに、非常に高い実行パフォーマンスを出せる</description>
    </item>
    
    <item>
      <title>LuneScript の Google 翻訳</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-06-26-lunescript-trans/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-06-26-lunescript-trans/</guid>
      <description>以前 lunescript の紹介記事を書いている時に、 lunescript の日本語訳がふと気になったんで調べていたんだが、 その時の Google 翻訳の結果が衝撃的だった。 &amp;lt;https://ifritjp.github.io/documents/lunescript/tutorial1/#headline-3&amp;gt; で、久し振りに Google 翻</description>
    </item>
    
    <item>
      <title>dot のレイアウト指定</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-06-09-graph/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-06-09-graph/</guid>
      <description>tunnel ツールのネタを書いた時、 dot を使ってグラフを作った。 dot は手軽にグラフを書ける便利なツールだが、 レイアウト制御に難があると思う。 グラフ作成ツー</description>
    </item>
    
    <item>
      <title>go の proxy server (github.com/elazarl/goproxy) の使い方</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-06-04-go-proxy/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-06-04-go-proxy/</guid>
      <description>go で proxy server を建てるには、 github.com/elazarl/goproxy を使うと簡単に実現できる。 https://github.com/elazarl/goproxy github の readme を見れば、簡単な使い方が載っているので特に問題はないだろう。 ただ、一点だけハマった</description>
    </item>
    
    <item>
      <title>Tunnel/Reverse Tunnel over websocket を作った</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-05-29-tunnel/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-05-29-tunnel/</guid>
      <description>とある理由から 「Tunnel/Reverse Tunnel over websocket」 が必要になったので作ってみた。 「Tunnel/Reverse Tunnel over webs</description>
    </item>
    
    <item>
      <title>Hugo を org-mode で使う時の注意点</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-03-29-hugo-org/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-03-29-hugo-org/</guid>
      <description>技術情報を GitHub Pages で公開するにあたって、 Hugo を使うことにした。 Hugo は Markdown で静的サイトを構築するツールだが、org-mode にも対応している。 「対応」と</description>
    </item>
    
    <item>
      <title>raspberry pi の USB MASS STORAGE 自動マウントを無効化する</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-02-21-raspberrypi-mount/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-02-21-raspberrypi-mount/</guid>
      <description>raspberry pi に SSD を接続して簡易 NAS にしている。 この簡易 NAS では、 SSD を取り外ししやすいように autofs によるマウントを設定した。 しかし、SSD を接続すると PCManFM の自動</description>
    </item>
    
    <item>
      <title>emacs lisp の quote</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-02-18-emacs-quoted-list/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-02-18-emacs-quoted-list/</guid>
      <description>emacs lisp の quote でハマったのでネタに書いておく。 (defvar hoge-val nil) (defun hoge-init () (setq hoge-val &amp;#39;(:val nil)) ) (defun hoge-set () (plist-put hoge-val :val &amp;#34;1&amp;#34;)) 上記のように変数 hoge-val に対して plist-put で処理する関数を定義して、 次のように</description>
    </item>
    
    <item>
      <title>org-mode 9.3.5 で babel(dot/plantuml) が動かなかった</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-02-13-emacs-org-9.3.5/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-02-13-emacs-org-9.3.5/</guid>
      <description>emacs の org-mode では、 .org ファイル内に C や python 等ソースコードを書いて、 export 時にそのソースコードを色付けした状態で載せることができる。 この機能を babel と言う。 babel で</description>
    </item>
    
    <item>
      <title>emacs 用 reviewboard モードの宣伝</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-02-03-emacs-reviewboard/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-02-03-emacs-reviewboard/</guid>
      <description>この記事は、emacs 用 reviewboard モードの宣伝である。 &amp;lt;https://github.com/ifritJP/emacs-reviewboard-front&amp;gt; reviewboard は、ソースコードレビューを Web 上で行ない記録するためのツール。 今は github の Pull-Request に代表されるように Web</description>
    </item>
    
    <item>
      <title>C 言語のラッパー関数オーバーヘッド</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-10-15-wrapper-overhead/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-10-15-wrapper-overhead/</guid>
      <description>プログラムを組む際、ラッパー関数を作ることは良くある。 このラッパー関数のオーバーヘッドが気になったので簡単に調べてみた。 計測用サンプルは次の</description>
    </item>
    
    <item>
      <title>C 言語の可変長引数 (va_list) 処理のオーバーヘッド</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-08-06-va-performance/</link>
      <pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-08-06-va-performance/</guid>
      <description>以前 C 言語の関数ポインタによる関数コールのオーバーヘッドがどの程度なのか調べたが、 今回は可変長引数(va_list)処理のオーバーヘッドにつ</description>
    </item>
    
    <item>
      <title>如何なる開発手法、プログラム言語を用いても、日本の全てのソフトウェアプロジェクトは必ず技術的負債になる</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-08-02-engineering/</link>
      <pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-08-02-engineering/</guid>
      <description>「日本の全てのソフトウェアプロジェクトは必ず技術的負債になる」というタイトルですが、 次の条件を満す場合に限ります。 「プロジェクトに関わるソフ</description>
    </item>
    
    <item>
      <title>emacs26.2 で矢印(→)等の一部のフォントが半角表示されるようになった</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-07-19-font/</link>
      <pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-07-19-font/</guid>
      <description>emacs のバージョンを 26.2 に変えたことで、 色々と細かいところの使い勝手が変っている。 その中で、 → 等の一部のフォントが半角表示されるようになったのが 微</description>
    </item>
    
  </channel>
</rss>
