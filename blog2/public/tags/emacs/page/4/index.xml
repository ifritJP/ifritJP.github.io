<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>emacs on hoge blog</title>
    <link>https://ifritjp.github.io/blog2/public/tags/emacs/</link>
    <description>Recent content in emacs on hoge blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 13 May 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ifritjp.github.io/blog2/public/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>raspberry pi の USB MASS STORAGE 自動マウントを無効化する</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-02-21-raspberrypi-mount/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-02-21-raspberrypi-mount/</guid>
      <description>raspberry pi に SSD を接続して簡易 NAS にしている。 この簡易 NAS では、 SSD を取り外ししやすいように autofs によるマウントを設定した。 しかし、SSD を接続すると PCManFM の自動</description>
    </item>
    
    <item>
      <title>emacs lisp の quote</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-02-18-emacs-quoted-list/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-02-18-emacs-quoted-list/</guid>
      <description>emacs lisp の quote でハマったのでネタに書いておく。 (defvar hoge-val nil) (defun hoge-init () (setq hoge-val &amp;#39;(:val nil)) ) (defun hoge-set () (plist-put hoge-val :val &amp;#34;1&amp;#34;)) 上記のように変数 hoge-val に対して plist-put で処理する関数を定義して、 次のように</description>
    </item>
    
    <item>
      <title>org-mode 9.3.5 で babel(dot/plantuml) が動かなかった</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-02-13-emacs-org-9.3.5/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-02-13-emacs-org-9.3.5/</guid>
      <description>emacs の org-mode では、 .org ファイル内に C や python 等ソースコードを書いて、 export 時にそのソースコードを色付けした状態で載せることができる。 この機能を babel と言う。 babel で</description>
    </item>
    
    <item>
      <title>emacs 用 reviewboard モードの宣伝</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2020/2020-02-03-emacs-reviewboard/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2020/2020-02-03-emacs-reviewboard/</guid>
      <description>この記事は、emacs 用 reviewboard モードの宣伝である。 &amp;lt;https://github.com/ifritJP/emacs-reviewboard-front&amp;gt; reviewboard は、ソースコードレビューを Web 上で行ない記録するためのツール。 今は github の Pull-Request に代表されるように Web</description>
    </item>
    
    <item>
      <title>C 言語のラッパー関数オーバーヘッド</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-10-15-wrapper-overhead/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-10-15-wrapper-overhead/</guid>
      <description>プログラムを組む際、ラッパー関数を作ることは良くある。 このラッパー関数のオーバーヘッドが気になったので簡単に調べてみた。 計測用サンプルは次の</description>
    </item>
    
    <item>
      <title>C 言語の可変長引数 (va_list) 処理のオーバーヘッド</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-08-06-va-performance/</link>
      <pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-08-06-va-performance/</guid>
      <description>以前 C 言語の関数ポインタによる関数コールのオーバーヘッドがどの程度なのか調べたが、 今回は可変長引数(va_list)処理のオーバーヘッドにつ</description>
    </item>
    
    <item>
      <title>如何なる開発手法、プログラム言語を用いても、日本の全てのソフトウェアプロジェクトは必ず技術的負債になる</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-08-02-engineering/</link>
      <pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-08-02-engineering/</guid>
      <description>「日本の全てのソフトウェアプロジェクトは必ず技術的負債になる」というタイトルですが、 次の条件を満す場合に限ります。 「プロジェクトに関わるソフ</description>
    </item>
    
    <item>
      <title>emacs26.2 で矢印(→)等の一部のフォントが半角表示されるようになった</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-07-19-font/</link>
      <pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-07-19-font/</guid>
      <description>emacs のバージョンを 26.2 に変えたことで、 色々と細かいところの使い勝手が変っている。 その中で、 → 等の一部のフォントが半角表示されるようになったのが 微</description>
    </item>
    
    <item>
      <title>stream は rewind/seek できる？</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-07-10-stream/</link>
      <pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-07-10-stream/</guid>
      <description>これは seekable な stream と none_seekable な stream の使い分けに関する記事です。 使い分けが十分出来ている人は読まなくても大丈夫です。 皆さんは bitstream という単語をご存知でしょうか？</description>
    </item>
    
    <item>
      <title>python のクラスを JSON 化</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-07-04-python-json/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-07-04-python-json/</guid>
      <description>コレ を作るにあたって、データの serialize/deserialize の方法を調べた結果、 marshmallow_dataclass に落ち着きました。 いくつか調べた中で、パッと見、直感的に出来そうだった、というだけの理</description>
    </item>
    
    <item>
      <title>ゲームのメッセージ欄に表示されたメッセージの読み上げシステム</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-06-28-text-to-speech/</link>
      <pubDate>Fri, 28 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-06-28-text-to-speech/</guid>
      <description>4 月頃から、英語のレベルを上げるため参考書を買って勉強をしている。 その参考書を使った最低限の基礎英語の復習は終ったので、次のステップに進むこ</description>
    </item>
    
    <item>
      <title>Raspberry pi zero w で Bluetooth 色々(ファイル転送:obex、 IP over BT:PAN )</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-06-15-rasp0w/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-06-15-rasp0w/</guid>
      <description>だいぶ前に買って放置していた Raspberry pi zero w をセットアップしました。 Raspberry pi zero w と言えば「小型軽量」が売りなんで、 今回はポータブルな IOT デバイスとして使う</description>
    </item>
    
    <item>
      <title>VMWare ディスクイメージが圧縮されないときの対応方法</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-05-20-vmware/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-05-20-vmware/</guid>
      <description>VMWare のディスクイメージのサイズは、Gest OS 上のディスクサイズと異なる。 基本的には、Gest OS 上で実際に使用されているサイズに圧縮された形でホ</description>
    </item>
    
    <item>
      <title>関数ポインタのオーバーヘッド</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-05-19-func-pointer/</link>
      <pubDate>Sun, 19 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-05-19-func-pointer/</guid>
      <description>現在 LuneScript の C 言語へのトランスコンパイル処理を対応中だが、 トランスコンパイルする際に関数ポインタによる関数コールのオーバーヘッドが どの程度なのか</description>
    </item>
    
    <item>
      <title>emacs 更新に伴なう gdb の設定</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-05-13-emacs26-gdb/</link>
      <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-05-13-emacs26-gdb/</guid>
      <description>とある事情で使い続けていた emacs23.4 (2012/1) を、 先日 emacs26.2 (2019/4) にアップデートした。 このとき gdb 周りの設定を変更する必要があったので、備忘録としてまとめておく。 2019-06-12: my-gud-stop,</description>
    </item>
    
    <item>
      <title>『エンジニア就職志望者が情報工学科に行くのは間違い』は間違い</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-04-18-engineer/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-04-18-engineer/</guid>
      <description>たまたま見つけたブログの記事で気になったものがあったので、 自分の意見を書いておきます。 気になったブログの記事 「エンジニア就職志望者が情報工学</description>
    </item>
    
    <item>
      <title>Android で emacs/org-mode/qiita 投稿</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-03-23-termux-org/</link>
      <pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-03-23-termux-org/</guid>
      <description>外出先の暇な時間を有効利用するため、ドキュメント書きをしたくなることがあります。 そして私は emacs ユーザ。 emacs ユーザが書きモノをするといえば、 emacs/org-mode です</description>
    </item>
    
    <item>
      <title>この度 Lua 神を拝命しました</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-03-16-lua/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-03-16-lua/</guid>
      <description>forkwell の github 分析結果が面白かったので貼っておく。</description>
    </item>
    
    <item>
      <title>Outlook で送信された日本語メールを Mew で受信すると文字化けする問題の対応</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-02-07-outlook/</link>
      <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-02-07-outlook/</guid>
      <description>Outlook は当初から評判が良くないため個人的には使用していません。 もうず〜〜〜〜〜と、 PC のメール環境は Mew を使用しています。 しかし、自分のメール送信・</description>
    </item>
    
    <item>
      <title>電ファミニコゲーマー</title>
      <link>https://ifritjp.github.io/blog2/public/posts/2019/2019-02-03-interview/</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/posts/2019/2019-02-03-interview/</guid>
      <description>ここ十年ほどまともにゲームしてないけど、 ネット検索しているときになんとなく気になった記事を読んでみたら、 ものスゴく面白かった。 古めの記事だけ</description>
    </item>
    
  </channel>
</rss>
