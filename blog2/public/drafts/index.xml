<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drafts on hoge blog</title>
    <link>https://ifritjp.github.io/blog2/public/drafts/</link>
    <description>Recent content in Drafts on hoge blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 28 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ifritjp.github.io/blog2/public/drafts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LuneScript の型の Mutable 制御を追加</title>
      <link>https://ifritjp.github.io/blog2/public/drafts/2021-05-28-add-mutable-control/</link>
      <pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/drafts/2021-05-28-add-mutable-control/</guid>
      <description>現在、 LuneScript のメンバの型の Mutable 制御には以下がある。 mutable (デフォルト) immutable (&amp;amp;) allmut これだと、どうも使い勝手が悪いケースがある。 immutable なインスタンスを生成する場合 下記のような Value クラスをメンバにもつ Test クラスを考える。 class Value { let mut val:int {pub}; local fn add() mut { self.val = self.val + 1; } } class Test { let val:Value; fn add() mut { self.val.add(); } fn get() : int { return self.val.$val; } } let mut value1 = new Value(1); let test1:Test = new Test( value1 ); // ここは成功 let value2 = new Value(2); let test2:Test = new Test( value2 ); // ここはエラー let value3 = new Value(3); let test3:&amp;amp;Test = new Test( value3 ); // ここはエラー ここで、 Test クラス</description>
    </item>
    
    <item>
      <title>トランスコンパイラの作り方</title>
      <link>https://ifritjp.github.io/blog2/public/drafts/2020-12-23-how-to-make-transcompiler/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ifritjp.github.io/blog2/public/drafts/2020-12-23-how-to-make-transcompiler/</guid>
      <description>LuneScript の開発を続けてきた振り返りとして、 「トランスコンパイラの作り方」 をまとめてみる。 自分でトランスコンパイラを作ってみたいという人には少しは参考になるかも。 まぁ、トランスコンパイラを自作しようという人は、 こんな文書を読む前にさっさと作り始めているような気もするが。 なお、トランスコンパイラは、ある言語 A で書かれたコードを、 論理を変えずに別の言語 B に変換する機能をもつツールです。 そしてトランスコンパイラ</description>
    </item>
    
  </channel>
</rss>
