#+title: go の自作モジュールを github で公開して import するまで
#+DATE: 2020-11-28
# -*- coding:utf-8 -*-
#+LAYOUT: post
#+TAGS: lunescript go lua
#+AUTHOR: ifritJP
#+OPTIONS: ^:{}
#+STARTUP: nofold

LuneScript 向けの別ツールを作ろうと思い、
LuneScript の go 向けランタイムを単独モジュールとして分割して管理すべく
奮闘した際の備忘録。

* go のモジュール

go は、 github に公開されているモジュールを取得して使用できる。

では、自作モジュールを github に公開して使用するにはどうすれば良いか？

ここでは、その方法について順を追って説明する。

* go のモジュール管理のおさらい

go にはモジュール管理機能が内包されており、
基本的には次の手順でコマンドを実行するだけで、
依存モジュールを管理できる。

#+BEGIN_SRC txt
$ go mod init
$ go build あるいは go mod tidy
#+END_SRC

依存モジュール情報は go.mod に記録される。

* 自作モジュールを github へ公開する

モジュールを github へ公開しないと始まらないので、
まずは github に公開する。

ここで最も重要な点は、次の 1 点。

*タグを付ける*

このタグは *v0.0.0* (数値はモジュールのバージョン)で付ける。

これがないと、 意図したモジュールを go が取ってきてくれない。

go は初回の *go build* あるいは *mod init* した際に、
プログラムで import しているモジュール情報を収集し、
そのモジュールの最新のタグを拾ってきて go.mod に記録している。

このときに依存モジュールの git に一つもタグがないと、
依存モジュールの初回コミットが利用される。
一つでもタグがある場合は、そのタグが利用される。

なお、タグ付けした後に更新があったとしても、
それにタグが無ければその更新は無視される。

go の依存モジュール管理は、あくまでもタグで制御する。

よって、タグ付けは必須である。

* 自作モジュールの更新

自作モジュールを更新した場合、
git への push はもちろんのこと、
タグを付けなければならない。

前述した通り、go の依存モジュール管理は、あくまでもタグで制御しているため、
その修正を有効にするにはタグ付けが必須である。

* go.mod の更新

モジュールを使用している側の go.mod は、
import しているモジュールと、そのバージョン(タグ)を紐付けて管理している。

一度 go.mod にバージョン情報が記録されると、
=go mod tidy= を実行しても依存モジュールのバージョンが自動で更新されることはない。

使用する依存モジュールのバージョンを更新するには、
go.mod で指定されているバージョンを書き換える必要がある。

* vendor 

以上のように、
依存モジュールはタグで管理されている。

これは、依存モジュールの再現性を担保するには必要な機能である。

しかし、自分でモジュールを開発している場合、
そのモジュールの結合動作を確認するために push してタグを付けるというのは
ナンセンスなので、
ローカルで修正してローカルで確認したいというケースでは、
vendor 機能を利用する。

vendor 機能は、依存モジュールをローカルの vendor ディレクトリで管理するもの。

依存モジュールを利用する側で、
次のコマンドを実行することで、
依存モジュールが vendor ディレクトリ以下にコピーされる。

: $ go mod vendor

この vendor ディレクトリ以下のモジュールを利用してビルドするには、
次のコマンドでビルドを行なう。

: $ go build -mod vendor

これによって、ローカルで依存モジュールの修正と確認が可能になる。

なお、当然 vendor で修正している内容は最終的に push & タグ付けしなければ
グルーバルに有効にならないので、
更新作業を忘れずに行なう必要がある。


