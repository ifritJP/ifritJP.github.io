#+title: LuneScript の型の Mutable 制御を追加
#+DATE: 2021-05-28
# -*- coding:utf-8 -*-
#+LAYOUT: post
#+TAGS: compiler
#+AUTHOR: ifritJP
#+OPTIONS: ^:{}
#+STARTUP: nofold

現在、 LuneScript のメンバの型の Mutable 制御には以下がある。

- mutable (デフォルト)
- immutable (&)
- allmut  

これだと、どうも使い勝手が悪いケースがある。

* immutable なインスタンスを生成する場合

下記のような Value クラスをメンバにもつ Test クラスを考える。

#+BEGIN_SRC lns
class Value {
   let mut val:int {pub};
   local fn add() mut {
      self.val = self.val + 1;
   }
}
class Test {
   let val:Value;
   fn add() mut {
      self.val.add();
   }
   fn get() : int {
      return self.val.$val;
   }
}
let mut value1 = new Value(1);
let test1:Test = new Test( value1 ); // ここは成功
let value2 = new Value(2);
let test2:Test = new Test( value2 ); // ここはエラー
let value3 = new Value(3);
let test3:&Test = new Test( value3 ); // ここはエラー
#+END_SRC

ここで、 Test クラスのメンバ val は Value の mutable 型である。
よって、 Test クラスのインスタンスを生成するには、
以下のように mutable 型の Value を指定する必要がある。

#+BEGIN_SRC lns
let mut value1 = new Value(1);
let test1 = new Test( value1 ); // ここは成功
#+END_SRC

以下のように immutable 型の Value を指定するとエラーになる。

#+BEGIN_SRC lns
let value2 = new Value(2);
let test2:Test = new Test( value2 ); // ここはエラー
#+END_SRC

これは当然の結果である。

なぜなら Test.add() は、メンバ val の mut メソッドをコールしているため、
Test の メンバ val は mutable でなければならない。
よって、 imuttable な Value を指定した場合はエラーになる。

しかし、次のケースを考えたらどうだろうか？

#+BEGIN_SRC lns
let value3 = new Value(3);
let test3:&Test = new Test( value3 ); // ここはエラー
#+END_SRC

test3 は &Test 型である。
この場合のメンバ val は immutable であるため、
immutable な Value を指定しても論理的に問題ない。


であれば、 =let test3:&Test = new Test( value3 );= を
許可すべきなんじゃないだろうか？

ただし、単純に =new Test( value3 )= を成功にしてしまうと、
=let test2:Test = new Test( value2 );= と区別ができないので、
そこは対処が必要である。


immutable なクラスのインスタンスを生成する場合、次の点に注意が必要である。

- allmut 型のメンバを持つ場合
- コンストラクタ内で、 そのメンバの mut メソッドをコールしている場合  

** allmut 型のメンバを持つ場合

allmut は、クラスのインスタンスが immutable であっても、
mutable として扱うことが出来る例外ケースである。

当然この場合は、クラスのインスタンスを immutable として生成するケースであっても、
メンバは mutable でなければならない。

具体的には、以下の hoge3 はエラーとなる。

#+BEGIN_SRC lns
class Value {
   let mut val:int {pub};
   local fn add() mut {
      self.val = self.val + 1;
   }
}
class Hoge {
   let val: allmut Value;
   fn add() {
      self.val.add();
   }
   fn get() : int {
      return self.val.$val;
   }
}
let mut value1 = new Value(1);
let hoge1:Hoge = new Hoge( value1 ); // ここは成功
let value2 = new Value(2);
let hoge2:Hoge = new Hoge( value2 ); // ここはエラー
let value3 = new Value(3);
let hoge3:&Hoge = new Hoge( value3 ); // ここはエラー
#+END_SRC


** コンストラクタ内で、そのメンバの mut メソッドをコールしている場合  

以下のような Hoge クラスを考える。
   
#+BEGIN_SRC lns
class Value {
   let mut val:int {pub};
   local fn add() mut {
      self.val = self.val + 1;
   }
}
class Hoge {
   let val: Value;
   pub fn __init( val:Value ) {
       val.add();
       self.val = val;
   }
}
#+END_SRC

ここで、 Hoge クラスのコンストラクタで =val.add();= を実行している。
これは val が mutable であることが前提にあるため、
この場合は val が immutable の場合はエラーにしなければならない。

* 実現方法

コンストラクタの引数の型に dep を追加する。

dep は、生成するクラスのインスタンスが
mutable 用のインスタンスの場合 mutable として働き、
immutable 用のインスタンスの場合 & (immutable) として働く。

メンバの宣言には、 dep は追加しないで現状のままとする。

new 演算子については、 =new &Test= のように、
クラス名の前に =&= が付加された場合は immutable のインスタンスを生成する。

#+BEGIN_SRC lns
class Value {
   let mut val:int {pub};
   local fn add() mut {
      self.val = self.val + 1;
   }
}
class Hoge {
   let val: Value;
   pub fn __init( val:dep Value ) {
      self.val = val;
   }
   fn add() {
      self.val.add();
   }
   fn get() : int {
      return self.val.$val;
   }
}
let mut value1 = new Value(1);
let hoge1:Hoge = new Hoge( value1 ); // ここは成功
let value2 = new Value(2);
let hoge2:Hoge = new Hoge( value2 ); // ここはエラー
let value3 = new Value(3);
let hoge3:&Hoge = new &Hoge( value3 ); // ここは成功
#+END_SRC
