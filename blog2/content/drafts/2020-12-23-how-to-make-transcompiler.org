#+title: トランスコンパイラの作り方
#+DATE: 2020-12-23
# -*- coding:utf-8 -*-
#+LAYOUT: post
#+TAGS: compiler
#+AUTHOR: ifritJP
#+OPTIONS: ^:{}
#+STARTUP: nofold

LuneScript の開発を続けてきた振り返りとして、
*「トランスコンパイラの作り方」* をまとめてみる。

自分でトランスコンパイラを作ってみたいという人には少しは参考になるかも。

まぁ、トランスコンパイラを自作しようという人は、
こんな文書を読む前にさっさと作り始めているような気もするが。

なお、トランスコンパイラは、ある言語 A で書かれたコードを、
論理を変えずに別の言語 B に変換する機能をもつツールです。

そしてトランスコンパイラは、変換元の言語の種類によって次の 2 つに分類できます。

- 既存の言語を、別の言語に変換する
- 新しい言語を、従来の別の言語に変換する

ここでは、後者を扱います。

* 工程

トランスコンパイラ開発には、次の工程が必要になります。

- 設計
  - 既存技術調査
  - 要件定義 (変換先の言語、プログラミングパラダイム等)
  - 技術選定 (開発に利用する言語・開発環境等)
  - 言語仕様策定 (syntax 等)
  - AST 構造
- 実装
  - 字句切り出し
  - AST の構築
  - 変換先言語へのコード出力
- テスト
  - 変換元のコードと、変換先コードの期待値作成
  - CI 環境構築
- セルフホスティング
  - セルフホスティングに必要な対応を優先的に行なう
  - 移植
- 開発支援
  - 自動インデント
  - コードの色付け
  - コード補完
  - エラーチェック

以降で個々の作業を説明します。

* 要件定義

開発するトランスコンパイラのイメージを明確にすることは重要です。

トランスコンパイラの開発技術を習得することが目的であれば、
イメージがぼんやりしたまま開発しても問題はないでしょう。

しかし、トランスコンパイラ開発の目的が、
なんらかの課題を解決することならば、
そのトランスコンパイラを価値あるものにしなければなりません。

例えば X 言語を新規に開発し、
Z という既存の言語に変換するトランスコンパイラを開発するとします。

: X --- transcompile --> Z

このとき X 言語を使うことで、
Z 言語を使う上での課題を解決するのは当然です。

問題は、X 言語を使うことで新しい課題が発生し、
それによって X 言語を使うメリットが相殺されてしまうことが無いか？
ということです。

新規に開発する X 言語は、
Z 言語よりもトータルでメリットがなければならないです。

それをこの要件定義で明確にします。

これが出来なければ、 X 言語の存在価値は、
開発当事者の自己満足を満たす以外ありません。

開発するトランスコンパイラのメリット・デメリットを洗い出し、
完成時にトランスコンパイラとしての価値があることが分かるように
道筋を確認してきましょう。

* 技術選定

  